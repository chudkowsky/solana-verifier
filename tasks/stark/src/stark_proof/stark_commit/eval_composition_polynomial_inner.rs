use crate::swiftness::air::consts::*;
use crate::swiftness::air::recursive_with_poseidon::consts::FELT_1;
use crate::swiftness::air::recursive_with_poseidon::GlobalValues;
use crate::swiftness::stark::types::StarkProof;
use felt::felt_nonzero;
use felt::Felt;
use utils::{impl_type_identifiable, BidirectionalStack, Executable, ProofData, TypeIdentifiable};
use utils::{
    CAPACITY, DOMAINS_SIZE, LENGTH_SIZE, MASK_VALUES_COLUMNS_SIZE, MASK_VALUES_ROWS_SIZE, POWS_SIZE,
};

#[repr(C)]
pub struct EvalCompositionPolynomialInner {
    phase: EvalCompositionPolynomialInnerPhase,
    current_step: usize,
    total_sum: Felt,
    constraint_coefficients_len: usize,
    point: Felt,
    trace_generator: Felt,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum EvalCompositionPolynomialInnerPhase {
    CollectInputs,
    ComputePowers,
    ComputeDomains,
    ComputeConstraints,
    Finalize,
    Done,
}

impl_type_identifiable!(EvalCompositionPolynomialInner);

impl EvalCompositionPolynomialInner {
    pub fn new() -> Self {
        Self {
            phase: EvalCompositionPolynomialInnerPhase::CollectInputs,
            current_step: 0,
            total_sum: Felt::ZERO,
            constraint_coefficients_len: 0,
            point: Felt::ZERO,
            trace_generator: Felt::ZERO,
        }
    }
}

impl Default for EvalCompositionPolynomialInner {
    fn default() -> Self {
        Self::new()
    }
}

impl Executable for EvalCompositionPolynomialInner {
    fn execute<T: BidirectionalStack + ProofData>(&mut self, stack: &mut T) -> Vec<Vec<u8>> {
        match self.phase {
            EvalCompositionPolynomialInnerPhase::CollectInputs => {
                self.phase = EvalCompositionPolynomialInnerPhase::ComputePowers;
                vec![]
            }

            EvalCompositionPolynomialInnerPhase::ComputePowers => {
                // Get global_values first to access trace_length
                let global_values = stack.get_global_values();
                let trace_length = global_values.trace_length;

                // Get pre-allocated arrays
                let autogenerated_pows = stack.get_autogenerated_pows_mut();

                // Compute powers following the original algorithm
                // pow0 to pow12 (point powers)
                autogenerated_pows[0] = self
                    .point
                    .pow_felt(&(trace_length.floor_div(&felt::felt_nonzero!(FELT_4096))));
                autogenerated_pows[1] = autogenerated_pows[0] * autogenerated_pows[0];
                autogenerated_pows[2] = autogenerated_pows[1] * autogenerated_pows[1];
                autogenerated_pows[3] = autogenerated_pows[2] * autogenerated_pows[2];
                autogenerated_pows[4] = autogenerated_pows[3] * autogenerated_pows[3];
                autogenerated_pows[5] = autogenerated_pows[4] * autogenerated_pows[4];
                autogenerated_pows[6] = autogenerated_pows[5] * autogenerated_pows[5];
                autogenerated_pows[7] = autogenerated_pows[6] * autogenerated_pows[6];
                autogenerated_pows[8] = autogenerated_pows[7] * autogenerated_pows[7];
                autogenerated_pows[9] = autogenerated_pows[8] * autogenerated_pows[8];
                autogenerated_pows[10] = autogenerated_pows[9] * autogenerated_pows[9];
                autogenerated_pows[11] = autogenerated_pows[10] * autogenerated_pows[10];
                autogenerated_pows[12] = autogenerated_pows[11] * autogenerated_pows[11];

                // pow13 to pow50 (trace_generator powers)
                autogenerated_pows[13] = self.trace_generator.pow_felt(&(trace_length - FELT_512));
                autogenerated_pows[14] = self.trace_generator.pow_felt(&(trace_length - FELT_256));
                autogenerated_pows[15] = self.trace_generator.pow_felt(&(trace_length - FELT_4096));
                autogenerated_pows[16] = self.trace_generator.pow_felt(&(trace_length - FELT_4));
                autogenerated_pows[17] = self.trace_generator.pow_felt(&(trace_length - FELT_2));
                autogenerated_pows[18] = self.trace_generator.pow_felt(&(trace_length - FELT_16));
                autogenerated_pows[19] = self
                    .trace_generator
                    .pow_felt(&(trace_length.floor_div(&felt::felt_nonzero!(FELT_2))));
                autogenerated_pows[20] = self.trace_generator.pow_felt(
                    &((FELT_255 * trace_length).floor_div(&felt::felt_nonzero!(FELT_256))),
                );
                autogenerated_pows[21] = self
                    .trace_generator
                    .pow_felt(&(trace_length.floor_div(&felt::felt_nonzero!(FELT_64))));
                autogenerated_pows[22] = autogenerated_pows[21] * autogenerated_pows[21];
                autogenerated_pows[23] = autogenerated_pows[21] * autogenerated_pows[22];
                autogenerated_pows[24] = autogenerated_pows[21] * autogenerated_pows[23];
                autogenerated_pows[25] = autogenerated_pows[21] * autogenerated_pows[24];
                autogenerated_pows[26] = autogenerated_pows[21] * autogenerated_pows[25];
                autogenerated_pows[27] = autogenerated_pows[19] * autogenerated_pows[26];
                autogenerated_pows[28] = autogenerated_pows[21] * autogenerated_pows[26];
                autogenerated_pows[29] = autogenerated_pows[21] * autogenerated_pows[28];
                autogenerated_pows[30] = autogenerated_pows[19] * autogenerated_pows[29];
                autogenerated_pows[31] = autogenerated_pows[21] * autogenerated_pows[29];
                autogenerated_pows[32] = autogenerated_pows[21] * autogenerated_pows[31];
                autogenerated_pows[33] = autogenerated_pows[19] * autogenerated_pows[32];
                autogenerated_pows[34] = autogenerated_pows[21] * autogenerated_pows[32];
                autogenerated_pows[35] = autogenerated_pows[21] * autogenerated_pows[34];
                autogenerated_pows[36] = autogenerated_pows[19] * autogenerated_pows[35];
                autogenerated_pows[37] = autogenerated_pows[21] * autogenerated_pows[35];
                autogenerated_pows[38] = autogenerated_pows[21] * autogenerated_pows[37];
                autogenerated_pows[39] = autogenerated_pows[19] * autogenerated_pows[38];
                autogenerated_pows[40] = autogenerated_pows[21] * autogenerated_pows[38];
                autogenerated_pows[41] = autogenerated_pows[22] * autogenerated_pows[39];
                autogenerated_pows[42] = autogenerated_pows[22] * autogenerated_pows[41];
                autogenerated_pows[43] = autogenerated_pows[22] * autogenerated_pows[42];
                autogenerated_pows[44] = autogenerated_pows[22] * autogenerated_pows[43];
                autogenerated_pows[45] = autogenerated_pows[22] * autogenerated_pows[44];
                autogenerated_pows[46] = autogenerated_pows[22] * autogenerated_pows[45];
                autogenerated_pows[47] = autogenerated_pows[22] * autogenerated_pows[46];
                autogenerated_pows[48] = autogenerated_pows[21] * autogenerated_pows[47];
                autogenerated_pows[49] = autogenerated_pows[21] * autogenerated_pows[48];
                autogenerated_pows[50] = autogenerated_pows[21] * autogenerated_pows[49];

                self.phase = EvalCompositionPolynomialInnerPhase::ComputeDomains;
                vec![]
            }

            EvalCompositionPolynomialInnerPhase::ComputeDomains => {
                let (autogenerated_pows, domains) = stack.get_pows_and_domains_mut();

                // Compute domains using powers from pre-allocated array
                domains[0] = autogenerated_pows[12] - FELT_1;
                domains[1] = autogenerated_pows[11] - FELT_1;
                domains[2] = autogenerated_pows[10] - FELT_1;
                domains[3] = autogenerated_pows[9] - FELT_1;
                domains[4] = autogenerated_pows[8] - autogenerated_pows[47];
                domains[5] = autogenerated_pows[8] - FELT_1;
                domains[6] = autogenerated_pows[7] - FELT_1;
                domains[7] = autogenerated_pows[6] - FELT_1;
                domains[8] = autogenerated_pows[5] - FELT_1;
                domains[9] = autogenerated_pows[4] - FELT_1;
                domains[10] = autogenerated_pows[4] - autogenerated_pows[41];

                // Compute complex domains with temp calculations
                let temp = autogenerated_pows[4] - autogenerated_pows[21];
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[22]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[23]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[24]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[25]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[26]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[28]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[29]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[31]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[32]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[34]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[35]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[37]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[38]);
                let temp = temp * (autogenerated_pows[4] - autogenerated_pows[40]);
                domains[11] = temp * domains[9];

                domains[12] = autogenerated_pows[3] - FELT_1;
                domains[13] = autogenerated_pows[3] - autogenerated_pows[41];
                domains[14] = autogenerated_pows[2] - autogenerated_pows[49];

                let temp = autogenerated_pows[2] - autogenerated_pows[36];
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[39]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[41]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[42]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[43]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[44]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[45]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[46]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[47]);
                domains[15] = temp * domains[14];

                domains[16] = autogenerated_pows[2] - FELT_1;

                let temp = autogenerated_pows[2] - autogenerated_pows[48];
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[50]);
                domains[17] = temp * domains[14];

                let temp = autogenerated_pows[2] - autogenerated_pows[27];
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[30]);
                let temp = temp * (autogenerated_pows[2] - autogenerated_pows[33]);
                domains[18] = temp * domains[15];

                domains[19] = autogenerated_pows[1] - FELT_1;
                domains[20] = autogenerated_pows[1] - autogenerated_pows[20];
                domains[21] = autogenerated_pows[1] - autogenerated_pows[50];
                domains[22] = autogenerated_pows[0] - autogenerated_pows[19];
                domains[23] = autogenerated_pows[0] - FELT_1;
                domains[24] = self.point - autogenerated_pows[18];
                domains[25] = self.point - FELT_1;
                domains[26] = self.point - autogenerated_pows[17];
                domains[27] = self.point - autogenerated_pows[16];
                domains[28] = self.point - autogenerated_pows[15];
                domains[29] = self.point - autogenerated_pows[14];
                domains[30] = self.point - autogenerated_pows[13];

                let proof: &StarkProof = stack.get_proof_reference();
                self.constraint_coefficients_len = proof
                    .witness
                    .composition_witness
                    .vector
                    .authentications
                    .len();

                self.phase = EvalCompositionPolynomialInnerPhase::ComputeConstraints;
                vec![]
            }

            EvalCompositionPolynomialInnerPhase::ComputeConstraints => {
                // Get all references at once to avoid borrowing conflicts
                let (proof, domains, mask_column_row, global_values, constraint_coefficients) =
                    stack.get_proof_data_references::<StarkProof>();
                let oods = &proof.unsent_commitment.oods_values;
                let mask_values = &oods.as_slice()[0..oods.len() - 2];

                // Get global_values from account
                // let global_values = stack.get_global_values().downcast_ref::<GlobalValues>().unwrap();

                // Get both domains and mask_column_row references to avoid borrowing conflicts
                // let (domains, mask_column_row) = stack.get_domains_and_mask_column_row_mut();

                // Mapowanie z mask_values do mask_column_row zgodnie z oryginalnym kodem
                // column0_row0 = mask_values[0] -> mask_column_row[0][0]
                mask_column_row[0][0] = mask_values[0];
                // column0_row1 = mask_values[1] -> mask_column_row[1][0]
                mask_column_row[1][0] = mask_values[1];
                // column0_row2 = mask_values[2] -> mask_column_row[2][0]
                mask_column_row[2][0] = mask_values[2];
                // column0_row3 = mask_values[3] -> mask_column_row[3][0]
                mask_column_row[3][0] = mask_values[3];
                // column0_row4 = mask_values[4] -> mask_column_row[4][0]
                mask_column_row[4][0] = mask_values[4];
                // column0_row5 = mask_values[5] -> mask_column_row[5][0]
                mask_column_row[5][0] = mask_values[5];
                // column0_row6 = mask_values[6] -> mask_column_row[6][0]
                mask_column_row[6][0] = mask_values[6];
                // column0_row7 = mask_values[7] -> mask_column_row[7][0]
                mask_column_row[7][0] = mask_values[7];
                // column0_row8 = mask_values[8] -> mask_column_row[8][0]
                mask_column_row[8][0] = mask_values[8];
                // column0_row9 = mask_values[9] -> mask_column_row[9][0]
                mask_column_row[9][0] = mask_values[9];
                // column0_row10 = mask_values[10] -> mask_column_row[10][0]
                mask_column_row[10][0] = mask_values[10];
                // column0_row11 = mask_values[11] -> mask_column_row[11][0]
                mask_column_row[11][0] = mask_values[11];
                // column0_row12 = mask_values[12] -> mask_column_row[12][0]
                mask_column_row[12][0] = mask_values[12];
                // column0_row13 = mask_values[13] -> mask_column_row[13][0]
                mask_column_row[13][0] = mask_values[13];
                // column0_row14 = mask_values[14] -> mask_column_row[14][0]
                mask_column_row[14][0] = mask_values[14];
                // column0_row15 = mask_values[15] -> mask_column_row[15][0]
                mask_column_row[15][0] = mask_values[15];
                // column1_row0 = mask_values[16] -> mask_column_row[0][1]
                mask_column_row[0][1] = mask_values[16];
                // column1_row1 = mask_values[17] -> mask_column_row[1][1]
                mask_column_row[1][1] = mask_values[17];
                // column1_row2 = mask_values[18] -> mask_column_row[2][1]
                mask_column_row[2][1] = mask_values[18];
                // column1_row3 = mask_values[19] -> mask_column_row[3][1]
                mask_column_row[3][1] = mask_values[19];
                // column1_row4 = mask_values[20] -> mask_column_row[4][1]
                mask_column_row[4][1] = mask_values[20];
                // column1_row5 = mask_values[21] -> mask_column_row[5][1]
                mask_column_row[5][1] = mask_values[21];
                // column1_row8 = mask_values[22] -> mask_column_row[8][1]
                mask_column_row[8][1] = mask_values[22];
                // column1_row9 = mask_values[23] -> mask_column_row[9][1]
                mask_column_row[9][1] = mask_values[23];
                // column1_row10 = mask_values[24] -> mask_column_row[10][1]
                mask_column_row[10][1] = mask_values[24];
                // column1_row11 = mask_values[25] -> mask_column_row[11][1]
                mask_column_row[11][1] = mask_values[25];
                // column1_row12 = mask_values[26] -> mask_column_row[12][1]
                mask_column_row[12][1] = mask_values[26];
                // column1_row13 = mask_values[27] -> mask_column_row[13][1]
                mask_column_row[13][1] = mask_values[27];
                // column1_row16 = mask_values[28] -> mask_column_row[16][1]
                mask_column_row[16][1] = mask_values[28];
                // column1_row42 = mask_values[29] -> mask_column_row[42][1]
                mask_column_row[42][1] = mask_values[29];
                // column1_row43 = mask_values[30] -> mask_column_row[43][1]
                mask_column_row[43][1] = mask_values[30];
                // column1_row74 = mask_values[31] -> mask_column_row[74][1]
                mask_column_row[74][1] = mask_values[31];
                // column1_row75 = mask_values[32] -> mask_column_row[75][1]
                mask_column_row[75][1] = mask_values[32];
                // column1_row106 = mask_values[33] -> mask_column_row[106][1]
                mask_column_row[106][1] = mask_values[33];
                // column1_row138 = mask_values[34] -> mask_column_row[138][1]
                mask_column_row[138][1] = mask_values[34];
                // column1_row139 = mask_values[35] -> mask_column_row[139][1]
                mask_column_row[139][1] = mask_values[35];
                // column1_row171 = mask_values[36] -> mask_column_row[171][1]
                mask_column_row[171][1] = mask_values[36];
                // column1_row202 = mask_values[37] -> mask_column_row[202][1]
                mask_column_row[202][1] = mask_values[37];
                // column1_row203 = mask_values[38] -> mask_column_row[203][1]
                mask_column_row[203][1] = mask_values[38];
                // column1_row234 = mask_values[39] -> mask_column_row[234][1]
                mask_column_row[234][1] = mask_values[39];
                // column1_row235 = mask_values[40] -> mask_column_row[235][1]
                mask_column_row[235][1] = mask_values[40];
                // column1_row266 = mask_values[41] -> mask_column_row[266][1]
                mask_column_row[266][1] = mask_values[41];
                // column1_row267 = mask_values[42] -> mask_column_row[267][1]
                mask_column_row[267][1] = mask_values[42];
                // column1_row298 = mask_values[43] -> mask_column_row[298][1]
                mask_column_row[298][1] = mask_values[43];
                // column1_row394 = mask_values[44] -> mask_column_row[394][1]
                mask_column_row[394][1] = mask_values[44];
                // column1_row458 = mask_values[45] -> mask_column_row[458][1]
                mask_column_row[458][1] = mask_values[45];
                // column1_row459 = mask_values[46] -> mask_column_row[459][1]
                mask_column_row[459][1] = mask_values[46];
                // column1_row714 = mask_values[47] -> mask_column_row[714][1]
                mask_column_row[714][1] = mask_values[47];
                // column1_row715 = mask_values[48] -> mask_column_row[715][1]
                mask_column_row[715][1] = mask_values[48];
                // column1_row778 = mask_values[49] -> mask_column_row[778][1]
                mask_column_row[778][1] = mask_values[49];
                // column1_row779 = mask_values[50] -> mask_column_row[779][1]
                mask_column_row[779][1] = mask_values[50];
                // column1_row970 = mask_values[51] -> mask_column_row[970][1]
                mask_column_row[970][1] = mask_values[51];
                // column1_row971 = mask_values[52] -> mask_column_row[971][1]
                mask_column_row[971][1] = mask_values[52];
                // column1_row1034 = mask_values[53] -> mask_column_row[1034][1]
                mask_column_row[1034][1] = mask_values[53];
                // column1_row1035 = mask_values[54] -> mask_column_row[1035][1]
                mask_column_row[1035][1] = mask_values[54];
                // column1_row2058 = mask_values[55] -> mask_column_row[2058][1]
                mask_column_row[2058][1] = mask_values[55];
                // column1_row2059 = mask_values[56] -> mask_column_row[2059][1]
                mask_column_row[2059][1] = mask_values[56];
                // column1_row4106 = mask_values[57] -> mask_column_row[4106][1]
                mask_column_row[4106][1] = mask_values[57];
                // column2_row0 = mask_values[58] -> mask_column_row[0][2]
                mask_column_row[0][2] = mask_values[58];
                // column2_row1 = mask_values[59] -> mask_column_row[1][2]
                mask_column_row[1][2] = mask_values[59];
                // column2_row2 = mask_values[60] -> mask_column_row[2][2]
                mask_column_row[2][2] = mask_values[60];
                // column2_row3 = mask_values[61] -> mask_column_row[3][2]
                mask_column_row[3][2] = mask_values[61];
                // column3_row0 = mask_values[62] -> mask_column_row[0][3]
                mask_column_row[0][3] = mask_values[62];
                // column3_row1 = mask_values[63] -> mask_column_row[1][3]
                mask_column_row[1][3] = mask_values[63];
                // column3_row2 = mask_values[64] -> mask_column_row[2][3]
                mask_column_row[2][3] = mask_values[64];
                // column3_row3 = mask_values[65] -> mask_column_row[3][3]
                mask_column_row[3][3] = mask_values[65];
                // column3_row4 = mask_values[66] -> mask_column_row[4][3]
                mask_column_row[4][3] = mask_values[66];
                // column3_row8 = mask_values[67] -> mask_column_row[8][3]
                mask_column_row[8][3] = mask_values[67];
                // column3_row12 = mask_values[68] -> mask_column_row[12][3]
                mask_column_row[12][3] = mask_values[68];
                // column3_row16 = mask_values[69] -> mask_column_row[16][3]
                mask_column_row[16][3] = mask_values[69];
                // column3_row20 = mask_values[70] -> mask_column_row[20][3]
                mask_column_row[20][3] = mask_values[70];
                // column3_row24 = mask_values[71] -> mask_column_row[24][3]
                mask_column_row[24][3] = mask_values[71];
                // column3_row28 = mask_values[72] -> mask_column_row[28][3]
                mask_column_row[28][3] = mask_values[72];
                // column3_row32 = mask_values[73] -> mask_column_row[32][3]
                mask_column_row[32][3] = mask_values[73];
                // column3_row36 = mask_values[74] -> mask_column_row[36][3]
                mask_column_row[36][3] = mask_values[74];
                // column3_row40 = mask_values[75] -> mask_column_row[40][3]
                mask_column_row[40][3] = mask_values[75];
                // column3_row44 = mask_values[76] -> mask_column_row[44][3]
                mask_column_row[44][3] = mask_values[76];
                // column3_row48 = mask_values[77] -> mask_column_row[48][3]
                mask_column_row[48][3] = mask_values[77];
                // column3_row52 = mask_values[78] -> mask_column_row[52][3]
                mask_column_row[52][3] = mask_values[78];
                // column3_row56 = mask_values[79] -> mask_column_row[56][3]
                mask_column_row[56][3] = mask_values[79];
                // column3_row60 = mask_values[80] -> mask_column_row[60][3]
                mask_column_row[60][3] = mask_values[80];
                // column3_row64 = mask_values[81] -> mask_column_row[64][3]
                mask_column_row[64][3] = mask_values[81];
                // column3_row66 = mask_values[82] -> mask_column_row[66][3]
                mask_column_row[66][3] = mask_values[82];
                // column3_row128 = mask_values[83] -> mask_column_row[128][3]
                mask_column_row[128][3] = mask_values[83];
                // column3_row130 = mask_values[84] -> mask_column_row[130][3]
                mask_column_row[130][3] = mask_values[84];
                // column3_row176 = mask_values[85] -> mask_column_row[176][3]
                mask_column_row[176][3] = mask_values[85];
                // column3_row180 = mask_values[86] -> mask_column_row[180][3]
                mask_column_row[180][3] = mask_values[86];
                // column3_row184 = mask_values[87] -> mask_column_row[184][3]
                mask_column_row[184][3] = mask_values[87];
                // column3_row188 = mask_values[88] -> mask_column_row[188][3]
                mask_column_row[188][3] = mask_values[88];
                // column3_row192 = mask_values[89] -> mask_column_row[192][3]
                mask_column_row[192][3] = mask_values[89];
                // column3_row194 = mask_values[90] -> mask_column_row[194][3]
                mask_column_row[194][3] = mask_values[90];
                // column3_row240 = mask_values[91] -> mask_column_row[240][3]
                mask_column_row[240][3] = mask_values[91];
                // column3_row244 = mask_values[92] -> mask_column_row[244][3]
                mask_column_row[244][3] = mask_values[92];
                // column3_row248 = mask_values[93] -> mask_column_row[248][3]
                mask_column_row[248][3] = mask_values[93];
                // column3_row252 = mask_values[94] -> mask_column_row[252][3]
                mask_column_row[252][3] = mask_values[94];
                // column4_row0 = mask_values[95] -> mask_column_row[0][4]
                mask_column_row[0][4] = mask_values[95];
                // column4_row1 = mask_values[96] -> mask_column_row[1][4]
                mask_column_row[1][4] = mask_values[96];
                // column4_row2 = mask_values[97] -> mask_column_row[2][4]
                mask_column_row[2][4] = mask_values[97];
                // column4_row3 = mask_values[98] -> mask_column_row[3][4]
                mask_column_row[3][4] = mask_values[98];
                // column4_row4 = mask_values[99] -> mask_column_row[4][4]
                mask_column_row[4][4] = mask_values[99];
                // column4_row5 = mask_values[100] -> mask_column_row[5][4]
                mask_column_row[5][4] = mask_values[100];
                // column4_row6 = mask_values[101] -> mask_column_row[6][4]
                mask_column_row[6][4] = mask_values[101];
                // column4_row7 = mask_values[102] -> mask_column_row[7][4]
                mask_column_row[7][4] = mask_values[102];
                // column4_row8 = mask_values[103] -> mask_column_row[8][4]
                mask_column_row[8][4] = mask_values[103];
                // column4_row9 = mask_values[104] -> mask_column_row[9][4]
                mask_column_row[9][4] = mask_values[104];
                // column4_row11 = mask_values[105] -> mask_column_row[11][4]
                mask_column_row[11][4] = mask_values[105];
                // column4_row12 = mask_values[106] -> mask_column_row[12][4]
                mask_column_row[12][4] = mask_values[106];
                // column4_row13 = mask_values[107] -> mask_column_row[13][4]
                mask_column_row[13][4] = mask_values[107];
                // column4_row44 = mask_values[108] -> mask_column_row[44][4]
                mask_column_row[44][4] = mask_values[108];
                // column4_row76 = mask_values[109] -> mask_column_row[76][4]
                mask_column_row[76][4] = mask_values[109];
                // column4_row108 = mask_values[110] -> mask_column_row[108][4]
                mask_column_row[108][4] = mask_values[110];
                // column4_row140 = mask_values[111] -> mask_column_row[140][4]
                mask_column_row[140][4] = mask_values[111];
                // column4_row172 = mask_values[112] -> mask_column_row[172][4]
                mask_column_row[172][4] = mask_values[112];
                // column4_row204 = mask_values[113] -> mask_column_row[204][4]
                mask_column_row[204][4] = mask_values[113];
                // column4_row236 = mask_values[114] -> mask_column_row[236][4]
                mask_column_row[236][4] = mask_values[114];
                // column4_row1539 = mask_values[115] -> mask_column_row[1539][4]
                mask_column_row[1539][4] = mask_values[115];
                // column4_row1547 = mask_values[116] -> mask_column_row[1547][4]
                mask_column_row[1547][4] = mask_values[116];
                // column4_row1571 = mask_values[117] -> mask_column_row[1571][4]
                mask_column_row[1571][4] = mask_values[117];
                // column4_row1579 = mask_values[118] -> mask_column_row[1579][4]
                mask_column_row[1579][4] = mask_values[118];
                // column4_row2011 = mask_values[119] -> mask_column_row[2011][4]
                mask_column_row[2011][4] = mask_values[119];
                // column4_row2019 = mask_values[120] -> mask_column_row[2019][4]
                mask_column_row[2019][4] = mask_values[120];
                // column4_row2041 = mask_values[121] -> mask_column_row[2041][4]
                mask_column_row[2041][4] = mask_values[121];
                // column4_row2045 = mask_values[122] -> mask_column_row[2045][4]
                mask_column_row[2045][4] = mask_values[122];
                // column4_row2047 = mask_values[123] -> mask_column_row[2047][4]
                mask_column_row[2047][4] = mask_values[123];
                // column4_row2049 = mask_values[124] -> mask_column_row[2049][4]
                mask_column_row[2049][4] = mask_values[124];
                // column4_row2051 = mask_values[125] -> mask_column_row[2051][4]
                mask_column_row[2051][4] = mask_values[125];
                // column4_row2053 = mask_values[126] -> mask_column_row[2053][4]
                mask_column_row[2053][4] = mask_values[126];
                // column4_row4089 = mask_values[127] -> mask_column_row[4089][4]
                mask_column_row[4089][4] = mask_values[127];
                // column5_row0 = mask_values[128] -> mask_column_row[0][5]
                mask_column_row[0][5] = mask_values[128];
                // column5_row1 = mask_values[129] -> mask_column_row[1][5]
                mask_column_row[1][5] = mask_values[129];
                // column5_row2 = mask_values[130] -> mask_column_row[2][5]
                mask_column_row[2][5] = mask_values[130];
                // column5_row4 = mask_values[131] -> mask_column_row[4][5]
                mask_column_row[4][5] = mask_values[131];
                // column5_row6 = mask_values[132] -> mask_column_row[6][5]
                mask_column_row[6][5] = mask_values[132];
                // column5_row8 = mask_values[133] -> mask_column_row[8][5]
                mask_column_row[8][5] = mask_values[133];
                // column5_row9 = mask_values[134] -> mask_column_row[9][5]
                mask_column_row[9][5] = mask_values[134];
                // column5_row10 = mask_values[135] -> mask_column_row[10][5]
                mask_column_row[10][5] = mask_values[135];
                // column5_row12 = mask_values[136] -> mask_column_row[12][5]
                mask_column_row[12][5] = mask_values[136];
                // column5_row14 = mask_values[137] -> mask_column_row[14][5]
                mask_column_row[14][5] = mask_values[137];
                // column5_row16 = mask_values[138] -> mask_column_row[16][5]
                mask_column_row[16][5] = mask_values[138];
                // column5_row17 = mask_values[139] -> mask_column_row[17][5]
                mask_column_row[17][5] = mask_values[139];
                // column5_row22 = mask_values[140] -> mask_column_row[22][5]
                mask_column_row[22][5] = mask_values[140];
                // column5_row24 = mask_values[141] -> mask_column_row[24][5]
                mask_column_row[24][5] = mask_values[141];
                // column5_row25 = mask_values[142] -> mask_column_row[25][5]
                mask_column_row[25][5] = mask_values[142];
                // column5_row30 = mask_values[143] -> mask_column_row[30][5]
                mask_column_row[30][5] = mask_values[143];
                // column5_row33 = mask_values[144] -> mask_column_row[33][5]
                mask_column_row[33][5] = mask_values[144];
                // column5_row38 = mask_values[145] -> mask_column_row[38][5]
                mask_column_row[38][5] = mask_values[145];
                // column5_row41 = mask_values[146] -> mask_column_row[41][5]
                mask_column_row[41][5] = mask_values[146];
                // column5_row46 = mask_values[147] -> mask_column_row[46][5]
                mask_column_row[46][5] = mask_values[147];
                // column5_row49 = mask_values[148] -> mask_column_row[49][5]
                mask_column_row[49][5] = mask_values[148];
                // column5_row54 = mask_values[149] -> mask_column_row[54][5]
                mask_column_row[54][5] = mask_values[149];
                // column5_row57 = mask_values[150] -> mask_column_row[57][5]
                mask_column_row[57][5] = mask_values[150];
                // column5_row65 = mask_values[151] -> mask_column_row[65][5]
                mask_column_row[65][5] = mask_values[151];
                // column5_row73 = mask_values[152] -> mask_column_row[73][5]
                mask_column_row[73][5] = mask_values[152];
                // column5_row81 = mask_values[153] -> mask_column_row[81][5]
                mask_column_row[81][5] = mask_values[153];
                // column5_row89 = mask_values[154] -> mask_column_row[89][5]
                mask_column_row[89][5] = mask_values[154];
                // column5_row97 = mask_values[155] -> mask_column_row[97][5]
                mask_column_row[97][5] = mask_values[155];
                // column5_row105 = mask_values[156] -> mask_column_row[105][5]
                mask_column_row[105][5] = mask_values[156];
                // column5_row137 = mask_values[157] -> mask_column_row[137][5]
                mask_column_row[137][5] = mask_values[157];
                // column5_row169 = mask_values[158] -> mask_column_row[169][5]
                mask_column_row[169][5] = mask_values[158];
                // column5_row201 = mask_values[159] -> mask_column_row[201][5]
                mask_column_row[201][5] = mask_values[159];
                // column5_row393 = mask_values[160] -> mask_column_row[393][5]
                mask_column_row[393][5] = mask_values[160];
                // column5_row409 = mask_values[161] -> mask_column_row[409][5]
                mask_column_row[409][5] = mask_values[161];
                // column5_row425 = mask_values[162] -> mask_column_row[425][5]
                mask_column_row[425][5] = mask_values[162];
                // column5_row457 = mask_values[163] -> mask_column_row[457][5]
                mask_column_row[457][5] = mask_values[163];
                // column5_row473 = mask_values[164] -> mask_column_row[473][5]
                mask_column_row[473][5] = mask_values[164];
                // column5_row489 = mask_values[165] -> mask_column_row[489][5]
                mask_column_row[489][5] = mask_values[165];
                // column5_row521 = mask_values[166] -> mask_column_row[521][5]
                mask_column_row[521][5] = mask_values[166];
                // column5_row553 = mask_values[167] -> mask_column_row[553][5]
                mask_column_row[553][5] = mask_values[167];
                // column5_row585 = mask_values[168] -> mask_column_row[585][5]
                mask_column_row[585][5] = mask_values[168];
                // column5_row609 = mask_values[169] -> mask_column_row[609][5]
                mask_column_row[609][5] = mask_values[169];
                // column5_row625 = mask_values[170] -> mask_column_row[625][5]
                mask_column_row[625][5] = mask_values[170];
                // column5_row641 = mask_values[171] -> mask_column_row[641][5]
                mask_column_row[641][5] = mask_values[171];
                // column5_row657 = mask_values[172] -> mask_column_row[657][5]
                mask_column_row[657][5] = mask_values[172];
                // column5_row673 = mask_values[173] -> mask_column_row[673][5]
                mask_column_row[673][5] = mask_values[173];
                // column5_row689 = mask_values[174] -> mask_column_row[689][5]
                mask_column_row[689][5] = mask_values[174];
                // column5_row905 = mask_values[175] -> mask_column_row[905][5]
                mask_column_row[905][5] = mask_values[175];
                // column5_row921 = mask_values[176] -> mask_column_row[921][5]
                mask_column_row[921][5] = mask_values[176];
                // column5_row937 = mask_values[177] -> mask_column_row[937][5]
                mask_column_row[937][5] = mask_values[177];
                // column5_row969 = mask_values[178] -> mask_column_row[969][5]
                mask_column_row[969][5] = mask_values[178];
                // column5_row982 = mask_values[179] -> mask_column_row[982][5]
                mask_column_row[982][5] = mask_values[179];
                // column5_row985 = mask_values[180] -> mask_column_row[985][5]
                mask_column_row[985][5] = mask_values[180];
                // column5_row998 = mask_values[181] -> mask_column_row[998][5]
                mask_column_row[998][5] = mask_values[181];
                // column5_row1001 = mask_values[182] -> mask_column_row[1001][5]
                mask_column_row[1001][5] = mask_values[182];
                // column5_row1014 = mask_values[183] -> mask_column_row[1014][5]
                mask_column_row[1014][5] = mask_values[183];
                // column6_inter1_row0 = mask_values[184] -> mask_column_row[0][6]
                mask_column_row[0][6] = mask_values[184];
                // column6_inter1_row1 = mask_values[185] -> mask_column_row[1][6]
                mask_column_row[1][6] = mask_values[185];
                // column6_inter1_row2 = mask_values[186] -> mask_column_row[2][6]
                mask_column_row[2][6] = mask_values[186];
                // column6_inter1_row3 = mask_values[187] -> mask_column_row[3][6]
                mask_column_row[3][6] = mask_values[187];
                // column7_inter1_row0 = mask_values[188] -> mask_column_row[0][7]
                mask_column_row[0][7] = mask_values[188];
                // column7_inter1_row1 = mask_values[189] -> mask_column_row[1][7]
                mask_column_row[1][7] = mask_values[189];
                // column7_inter1_row2 = mask_values[190] -> mask_column_row[2][7]
                mask_column_row[2][7] = mask_values[190];
                // column7_inter1_row5 = mask_values[191] -> mask_column_row[5][7]
                mask_column_row[5][7] = mask_values[191];

                //---------------------------------------
                // THIS FRAGMNET MIGHT CAUSE PROBLEMS AS THERE IS MANY LETS AND SOLANA MIGHT GET STACK OVERFLOW

                // Compute intermediate values using mask_column_row[row][column] directly
                // cpu_decode_opcode_range_check_bit_0 = column0_row0 - (column0_row1 + column0_row1)
                let cpu_decode_opcode_range_check_bit_0 =
                    mask_column_row[0][0] - (mask_column_row[1][0] + mask_column_row[1][0]);
                // cpu_decode_opcode_range_check_bit_2 = column0_row2 - (column0_row3 + column0_row3)
                let cpu_decode_opcode_range_check_bit_2 =
                    mask_column_row[2][0] - (mask_column_row[3][0] + mask_column_row[3][0]);
                // cpu_decode_opcode_range_check_bit_4 = column0_row4 - (column0_row5 + column0_row5)
                let cpu_decode_opcode_range_check_bit_4 =
                    mask_column_row[4][0] - (mask_column_row[5][0] + mask_column_row[5][0]);
                // cpu_decode_opcode_range_check_bit_3 = column0_row3 - (column0_row4 + column0_row4)
                let cpu_decode_opcode_range_check_bit_3 =
                    mask_column_row[3][0] - (mask_column_row[4][0] + mask_column_row[4][0]);
                // cpu_decode_flag_op1_base_op0_0 = FELT_1 - (cpu_decode_opcode_range_check_bit_2 + cpu_decode_opcode_range_check_bit_4 + cpu_decode_opcode_range_check_bit_3)
                let cpu_decode_flag_op1_base_op0_0 = FELT_1
                    - (cpu_decode_opcode_range_check_bit_2
                        + cpu_decode_opcode_range_check_bit_4
                        + cpu_decode_opcode_range_check_bit_3);
                // cpu_decode_opcode_range_check_bit_5 = column0_row5 - (column0_row6 + column0_row6)
                let cpu_decode_opcode_range_check_bit_5 =
                    mask_column_row[5][0] - (mask_column_row[6][0] + mask_column_row[6][0]);
                // cpu_decode_opcode_range_check_bit_6 = column0_row6 - (column0_row7 + column0_row7)
                let cpu_decode_opcode_range_check_bit_6 =
                    mask_column_row[6][0] - (mask_column_row[7][0] + mask_column_row[7][0]);
                // cpu_decode_opcode_range_check_bit_9 = column0_row9 - (column0_row10 + column0_row10)
                let cpu_decode_opcode_range_check_bit_9 =
                    mask_column_row[9][0] - (mask_column_row[10][0] + mask_column_row[10][0]);
                // cpu_decode_flag_res_op1_0 = FELT_1 - (cpu_decode_opcode_range_check_bit_5 + cpu_decode_opcode_range_check_bit_6 + cpu_decode_opcode_range_check_bit_9)
                let cpu_decode_flag_res_op1_0 = FELT_1
                    - (cpu_decode_opcode_range_check_bit_5
                        + cpu_decode_opcode_range_check_bit_6
                        + cpu_decode_opcode_range_check_bit_9);
                // cpu_decode_opcode_range_check_bit_7 = column0_row7 - (column0_row8 + column0_row8)
                let cpu_decode_opcode_range_check_bit_7 =
                    mask_column_row[7][0] - (mask_column_row[8][0] + mask_column_row[8][0]);
                // cpu_decode_opcode_range_check_bit_8 = column0_row8 - (column0_row9 + column0_row9)
                let cpu_decode_opcode_range_check_bit_8 =
                    mask_column_row[8][0] - (mask_column_row[9][0] + mask_column_row[9][0]);
                // cpu_decode_flag_pc_update_regular_0 = FELT_1 - (cpu_decode_opcode_range_check_bit_7 + cpu_decode_opcode_range_check_bit_8 + cpu_decode_opcode_range_check_bit_9)
                let cpu_decode_flag_pc_update_regular_0 = FELT_1
                    - (cpu_decode_opcode_range_check_bit_7
                        + cpu_decode_opcode_range_check_bit_8
                        + cpu_decode_opcode_range_check_bit_9);
                // cpu_decode_opcode_range_check_bit_12 = column0_row12 - (column0_row13 + column0_row13)
                let cpu_decode_opcode_range_check_bit_12 =
                    mask_column_row[12][0] - (mask_column_row[13][0] + mask_column_row[13][0]);
                // cpu_decode_opcode_range_check_bit_13 = column0_row13 - (column0_row14 + column0_row14)
                let cpu_decode_opcode_range_check_bit_13 =
                    mask_column_row[13][0] - (mask_column_row[14][0] + mask_column_row[14][0]);
                // cpu_decode_fp_update_regular_0 = FELT_1 - (cpu_decode_opcode_range_check_bit_12 + cpu_decode_opcode_range_check_bit_13)
                let cpu_decode_fp_update_regular_0 = FELT_1
                    - (cpu_decode_opcode_range_check_bit_12 + cpu_decode_opcode_range_check_bit_13);
                // cpu_decode_opcode_range_check_bit_1 = column0_row1 - (column0_row2 + column0_row2)
                let cpu_decode_opcode_range_check_bit_1 =
                    mask_column_row[1][0] - (mask_column_row[2][0] + mask_column_row[2][0]);
                // npc_reg_0 = column1_row0 + cpu_decode_opcode_range_check_bit_2 + FELT_1
                let npc_reg_0 =
                    mask_column_row[0][1] + cpu_decode_opcode_range_check_bit_2 + FELT_1;
                // cpu_decode_opcode_range_check_bit_10 = column0_row10 - (column0_row11 + column0_row11)
                let cpu_decode_opcode_range_check_bit_10 =
                    mask_column_row[10][0] - (mask_column_row[11][0] + mask_column_row[11][0]);
                // cpu_decode_opcode_range_check_bit_11 = column0_row11 - (column0_row12 + column0_row12)
                let cpu_decode_opcode_range_check_bit_11 =
                    mask_column_row[11][0] - (mask_column_row[12][0] + mask_column_row[12][0]);
                // cpu_decode_opcode_range_check_bit_14 = column0_row14 - (column0_row15 + column0_row15)
                let cpu_decode_opcode_range_check_bit_14 =
                    mask_column_row[14][0] - (mask_column_row[15][0] + mask_column_row[15][0]);
                // memory_address_diff_0 = column2_row2 - column2_row0
                let memory_address_diff_0 = mask_column_row[2][2] - mask_column_row[0][2];
                // range_check16_diff_0 = column4_row6 - column4_row2
                let range_check16_diff_0 = mask_column_row[6][4] - mask_column_row[2][4];
                // pedersen_hash0_ec_subset_sum_bit_0 = column4_row3 - (column4_row11 + column4_row11)
                let pedersen_hash0_ec_subset_sum_bit_0 =
                    mask_column_row[3][4] - (mask_column_row[11][4] + mask_column_row[11][4]);
                // pedersen_hash0_ec_subset_sum_bit_neg_0 = FELT_1 - pedersen_hash0_ec_subset_sum_bit_0
                let pedersen_hash0_ec_subset_sum_bit_neg_0 =
                    FELT_1 - pedersen_hash0_ec_subset_sum_bit_0;
                // range_check_builtin_value0_0 = column4_row12
                let range_check_builtin_value0_0 = mask_column_row[12][4];
                // range_check_builtin_value1_0 = range_check_builtin_value0_0 * global_values.offset_size + column4_row44
                let range_check_builtin_value1_0 = range_check_builtin_value0_0
                    * global_values.offset_size
                    + mask_column_row[44][4];
                // range_check_builtin_value2_0 = range_check_builtin_value1_0 * global_values.offset_size + column4_row76
                let range_check_builtin_value2_0 = range_check_builtin_value1_0
                    * global_values.offset_size
                    + mask_column_row[76][4];
                // range_check_builtin_value3_0 = range_check_builtin_value2_0 * global_values.offset_size + column4_row108
                let range_check_builtin_value3_0 = range_check_builtin_value2_0
                    * global_values.offset_size
                    + mask_column_row[108][4];
                // range_check_builtin_value4_0 = range_check_builtin_value3_0 * global_values.offset_size + column4_row140
                let range_check_builtin_value4_0 = range_check_builtin_value3_0
                    * global_values.offset_size
                    + mask_column_row[140][4];
                // range_check_builtin_value5_0 = range_check_builtin_value4_0 * global_values.offset_size + column4_row172
                let range_check_builtin_value5_0 = range_check_builtin_value4_0
                    * global_values.offset_size
                    + mask_column_row[172][4];
                // range_check_builtin_value6_0 = range_check_builtin_value5_0 * global_values.offset_size + column4_row204
                let range_check_builtin_value6_0 = range_check_builtin_value5_0
                    * global_values.offset_size
                    + mask_column_row[204][4];
                // range_check_builtin_value7_0 = range_check_builtin_value6_0 * global_values.offset_size + column4_row236
                let range_check_builtin_value7_0 = range_check_builtin_value6_0
                    * global_values.offset_size
                    + mask_column_row[236][4];
                // bitwise_sum_var_0_0 = column3_row0 + column3_row4 * FELT_2 + column3_row8 * FELT_4 + column3_row12 * FELT_8 + column3_row16 * FELT_18446744073709551616 + column3_row20 * FELT_36893488147419103232 + column3_row24 * FELT_73786976294838206464 + column3_row28 * FELT_147573952589676412928
                let bitwise_sum_var_0_0 = mask_column_row[0][3]
                    + mask_column_row[4][3] * FELT_2
                    + mask_column_row[8][3] * FELT_4
                    + mask_column_row[12][3] * FELT_8
                    + mask_column_row[16][3] * FELT_18446744073709551616
                    + mask_column_row[20][3] * FELT_36893488147419103232
                    + mask_column_row[24][3] * FELT_73786976294838206464
                    + mask_column_row[28][3] * FELT_147573952589676412928;
                // bitwise_sum_var_8_0 = column3_row32 * FELT_340282366920938463463374607431768211456 + column3_row36 * FELT_680564733841876926926749214863536422912 + column3_row40 * FELT_1361129467683753853853498429727072845824 + column3_row44 * FELT_2722258935367507707706996859454145691648 + column3_row48 * FELT_6277101735386680763835789423207666416102355444464034512896 + column3_row52 * FELT_12554203470773361527671578846415332832204710888928069025792 + column3_row56 * FELT_25108406941546723055343157692830665664409421777856138051584 + column3_row60 * FELT_50216813883093446110686315385661331328818843555712276103168
                let bitwise_sum_var_8_0 = mask_column_row[32][3]
                    * FELT_340282366920938463463374607431768211456
                    + mask_column_row[36][3] * FELT_680564733841876926926749214863536422912
                    + mask_column_row[40][3] * FELT_1361129467683753853853498429727072845824
                    + mask_column_row[44][3] * FELT_2722258935367507707706996859454145691648
                    + mask_column_row[48][3]
                        * FELT_6277101735386680763835789423207666416102355444464034512896
                    + mask_column_row[52][3]
                        * FELT_12554203470773361527671578846415332832204710888928069025792
                    + mask_column_row[56][3]
                        * FELT_25108406941546723055343157692830665664409421777856138051584
                    + mask_column_row[60][3]
                        * FELT_50216813883093446110686315385661331328818843555712276103168;
                // poseidon_poseidon_full_rounds_state0_cubed_0 = column5_row9 * column5_row105
                let poseidon_poseidon_full_rounds_state0_cubed_0 =
                    mask_column_row[9][5] * mask_column_row[105][5];
                // poseidon_poseidon_full_rounds_state1_cubed_0 = column5_row73 * column5_row25
                let poseidon_poseidon_full_rounds_state1_cubed_0 =
                    mask_column_row[73][5] * mask_column_row[25][5];
                // poseidon_poseidon_full_rounds_state2_cubed_0 = column5_row41 * column5_row89
                let poseidon_poseidon_full_rounds_state2_cubed_0 =
                    mask_column_row[41][5] * mask_column_row[89][5];
                // poseidon_poseidon_full_rounds_state0_cubed_7 = column5_row905 * column5_row1001
                let poseidon_poseidon_full_rounds_state0_cubed_7 =
                    mask_column_row[905][5] * mask_column_row[1001][5];
                // poseidon_poseidon_full_rounds_state1_cubed_7 = column5_row969 * column5_row921
                let poseidon_poseidon_full_rounds_state1_cubed_7 =
                    mask_column_row[969][5] * mask_column_row[921][5];
                // poseidon_poseidon_full_rounds_state2_cubed_7 = column5_row937 * column5_row985
                let poseidon_poseidon_full_rounds_state2_cubed_7 =
                    mask_column_row[937][5] * mask_column_row[985][5];
                // poseidon_poseidon_full_rounds_state0_cubed_3 = column5_row393 * column5_row489
                let poseidon_poseidon_full_rounds_state0_cubed_3 =
                    mask_column_row[393][5] * mask_column_row[489][5];
                // poseidon_poseidon_full_rounds_state1_cubed_3 = column5_row457 * column5_row409
                let poseidon_poseidon_full_rounds_state1_cubed_3 =
                    mask_column_row[457][5] * mask_column_row[409][5];
                // poseidon_poseidon_full_rounds_state2_cubed_3 = column5_row425 * column5_row473
                let poseidon_poseidon_full_rounds_state2_cubed_3 =
                    mask_column_row[425][5] * mask_column_row[473][5];
                // poseidon_poseidon_partial_rounds_state0_cubed_0 = column5_row6 * column5_row14
                let poseidon_poseidon_partial_rounds_state0_cubed_0 =
                    mask_column_row[6][5] * mask_column_row[14][5];
                // poseidon_poseidon_partial_rounds_state0_cubed_1 = column5_row22 * column5_row30
                let poseidon_poseidon_partial_rounds_state0_cubed_1 =
                    mask_column_row[22][5] * mask_column_row[30][5];
                // poseidon_poseidon_partial_rounds_state0_cubed_2 = column5_row38 * column5_row46
                let poseidon_poseidon_partial_rounds_state0_cubed_2 =
                    mask_column_row[38][5] * mask_column_row[46][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_0 = column5_row1 * column5_row17
                let poseidon_poseidon_partial_rounds_state1_cubed_0 =
                    mask_column_row[1][5] * mask_column_row[17][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_1 = column5_row33 * column5_row49
                let poseidon_poseidon_partial_rounds_state1_cubed_1 =
                    mask_column_row[33][5] * mask_column_row[49][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_2 = column5_row65 * column5_row81
                let poseidon_poseidon_partial_rounds_state1_cubed_2 =
                    mask_column_row[65][5] * mask_column_row[81][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_19 = column5_row609 * column5_row625
                let poseidon_poseidon_partial_rounds_state1_cubed_19 =
                    mask_column_row[609][5] * mask_column_row[625][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_20 = column5_row641 * column5_row657
                let poseidon_poseidon_partial_rounds_state1_cubed_20 =
                    mask_column_row[641][5] * mask_column_row[657][5];
                // poseidon_poseidon_partial_rounds_state1_cubed_21 = column5_row673 * column5_row689
                let poseidon_poseidon_partial_rounds_state1_cubed_21 =
                    mask_column_row[673][5] * mask_column_row[689][5];

                //---------------------------------------

                // Sum constraints.
                let mut total_sum = FELT_0;

                // Constraint: cpu/decode/opcode_range_check/bit.
                let value = (cpu_decode_opcode_range_check_bit_0
                    * cpu_decode_opcode_range_check_bit_0
                    - cpu_decode_opcode_range_check_bit_0)
                    * domains[4].field_div(&felt_nonzero!(domains[0]));
                total_sum = total_sum + constraint_coefficients[0] * value;

                // Constraint: cpu/decode/opcode_range_check/zero.
                let value = (mask_column_row[0][0]).field_div(&felt_nonzero!(domains[4]));
                total_sum = total_sum + constraint_coefficients[1] * value;

                // Constraint: cpu/decode/opcode_range_check_input.
                let value = (mask_column_row[1][1]
                    - (((mask_column_row[0][0] * global_values.offset_size
                        + mask_column_row[4][4])
                        * global_values.offset_size
                        + mask_column_row[8][4])
                        * global_values.offset_size
                        + mask_column_row[0][4]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[2] * value;

                // Constraint: cpu/decode/flag_op1_base_op0_bit.
                let value = (cpu_decode_flag_op1_base_op0_0 * cpu_decode_flag_op1_base_op0_0
                    - cpu_decode_flag_op1_base_op0_0)
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[3] * value;

                // Constraint: cpu/decode/flag_res_op1_bit.
                let value = (cpu_decode_flag_res_op1_0 * cpu_decode_flag_res_op1_0
                    - cpu_decode_flag_res_op1_0)
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[4] * value;

                // Constraint: cpu/decode/flag_pc_update_regular_bit.
                let value = (cpu_decode_flag_pc_update_regular_0
                    * cpu_decode_flag_pc_update_regular_0
                    - cpu_decode_flag_pc_update_regular_0)
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[5] * value;

                // Constraint: cpu/decode/fp_update_regular_bit.
                let value = (cpu_decode_fp_update_regular_0 * cpu_decode_fp_update_regular_0
                    - cpu_decode_fp_update_regular_0)
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[6] * value;

                // Constraint: cpu/operands/mem_dst_addr.
                let value = (mask_column_row[8][1] + global_values.half_offset_size
                    - (cpu_decode_opcode_range_check_bit_0 * mask_column_row[8][5]
                        + (FELT_1 - cpu_decode_opcode_range_check_bit_0) * mask_column_row[0][5]
                        + mask_column_row[0][4]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[7] * value;

                // Constraint: cpu/operands/mem0_addr.
                let value = (mask_column_row[4][1] + global_values.half_offset_size
                    - (cpu_decode_opcode_range_check_bit_1 * mask_column_row[8][5]
                        + (FELT_1 - cpu_decode_opcode_range_check_bit_1) * mask_column_row[0][5]
                        + mask_column_row[8][4]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[8] * value;

                // Constraint: cpu/operands/mem1_addr.
                let value = (mask_column_row[12][1] + global_values.half_offset_size
                    - (cpu_decode_opcode_range_check_bit_2 * mask_column_row[0][1]
                        + cpu_decode_opcode_range_check_bit_4 * mask_column_row[0][5]
                        + cpu_decode_opcode_range_check_bit_3 * mask_column_row[8][5]
                        + cpu_decode_flag_op1_base_op0_0 * mask_column_row[5][1]
                        + mask_column_row[4][4]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[9] * value;

                // Constraint: cpu/operands/ops_mul.
                let value = (mask_column_row[4][5]
                    - mask_column_row[5][1] * mask_column_row[13][1])
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[10] * value;

                // Constraint: cpu/operands/res.
                let value = ((FELT_1 - cpu_decode_opcode_range_check_bit_9)
                    * mask_column_row[12][5]
                    - (cpu_decode_opcode_range_check_bit_5
                        * (mask_column_row[5][1] + mask_column_row[13][1])
                        + cpu_decode_opcode_range_check_bit_6 * mask_column_row[4][5]
                        + cpu_decode_flag_res_op1_0 * mask_column_row[13][1]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[11] * value;

                // Constraint: cpu/update_registers/update_pc/tmp0.
                let value = (mask_column_row[2][5]
                    - cpu_decode_opcode_range_check_bit_9 * mask_column_row[9][1])
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[12] * value;

                // Constraint: cpu/update_registers/update_pc/tmp1.
                let value = (mask_column_row[10][5]
                    - mask_column_row[2][5] * mask_column_row[12][5])
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[13] * value;

                // Constraint: cpu/update_registers/update_pc/pc_cond_negative.
                let value = ((FELT_1 - cpu_decode_opcode_range_check_bit_9)
                    * mask_column_row[16][1]
                    + mask_column_row[2][5]
                        * (mask_column_row[16][1]
                            - (mask_column_row[0][1] + mask_column_row[13][1]))
                    - (cpu_decode_flag_pc_update_regular_0 * npc_reg_0
                        + cpu_decode_opcode_range_check_bit_7 * mask_column_row[12][5]
                        + cpu_decode_opcode_range_check_bit_8
                            * (mask_column_row[0][1] + mask_column_row[12][5])))
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[14] * value;

                // Constraint: cpu/update_registers/update_pc/pc_cond_positive.
                let value = ((mask_column_row[10][5] - cpu_decode_opcode_range_check_bit_9)
                    * (mask_column_row[16][1] - npc_reg_0))
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[15] * value;

                // Constraint: cpu/update_registers/update_ap/ap_update.
                let value = (mask_column_row[16][5]
                    - (mask_column_row[0][5]
                        + cpu_decode_opcode_range_check_bit_10 * mask_column_row[12][5]
                        + cpu_decode_opcode_range_check_bit_11
                        + cpu_decode_opcode_range_check_bit_12 * FELT_2))
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[16] * value;

                // Constraint: cpu/update_registers/update_fp/fp_update.
                let value = (mask_column_row[24][5]
                    - (cpu_decode_fp_update_regular_0 * mask_column_row[8][5]
                        + cpu_decode_opcode_range_check_bit_13 * mask_column_row[9][1]
                        + cpu_decode_opcode_range_check_bit_12 * (mask_column_row[0][5] + FELT_2)))
                    * domains[24].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[17] * value;

                // Constraint: cpu/opcodes/call/push_fp.
                let value = (cpu_decode_opcode_range_check_bit_12
                    * (mask_column_row[9][1] - mask_column_row[8][5]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[18] * value;

                // Constraint: cpu/opcodes/call/push_pc.
                let value = (cpu_decode_opcode_range_check_bit_12
                    * (mask_column_row[5][1]
                        - (mask_column_row[0][1] + cpu_decode_opcode_range_check_bit_2 + FELT_1)))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[19] * value;

                // Constraint: cpu/opcodes/call/off0.
                let value = (cpu_decode_opcode_range_check_bit_12
                    * (mask_column_row[0][4] - global_values.half_offset_size))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[20] * value;

                // Constraint: cpu/opcodes/call/off1.
                let value = (cpu_decode_opcode_range_check_bit_12
                    * (mask_column_row[8][4] - (global_values.half_offset_size + FELT_1)))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[21] * value;

                // Constraint: cpu/opcodes/call/flags.
                let value = (cpu_decode_opcode_range_check_bit_12
                    * (cpu_decode_opcode_range_check_bit_0
                        + cpu_decode_opcode_range_check_bit_1
                        + FELT_4))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[22] * value;

                // Constraint: cpu/opcodes/ret/off0.
                let value = (cpu_decode_opcode_range_check_bit_13
                    * (mask_column_row[0][4] + FELT_2 - global_values.half_offset_size))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[23] * value;

                // Constraint: cpu/opcodes/ret/off2.
                let value = (cpu_decode_opcode_range_check_bit_13
                    * (mask_column_row[4][4] + FELT_1 - global_values.half_offset_size))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[24] * value;

                // Constraint: cpu/opcodes/ret/flags.
                let value = (cpu_decode_opcode_range_check_bit_13
                    * (cpu_decode_opcode_range_check_bit_0 + cpu_decode_flag_res_op1_0 - FELT_4))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[25] * value;

                // Constraint: cpu/opcodes/assert_eq/assert_eq.
                let value = (cpu_decode_opcode_range_check_bit_14
                    * (mask_column_row[9][1] - mask_column_row[12][5]))
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[26] * value;

                // Constraint: initial_ap.
                let value = (mask_column_row[0][5] - global_values.initial_ap)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[27] * value;

                // Constraint: initial_fp.
                let value = (mask_column_row[8][5] - global_values.initial_ap)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[28] * value;

                // Constraint: initial_pc.
                let value = (mask_column_row[0][1] - global_values.initial_pc)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[29] * value;

                // Constraint: final_ap.
                let value = (mask_column_row[0][5] - global_values.final_ap)
                    .field_div(&felt_nonzero!(domains[24]));
                total_sum = total_sum + constraint_coefficients[30] * value;

                // Constraint: final_fp.
                let value = (mask_column_row[8][5] - global_values.initial_ap)
                    .field_div(&felt_nonzero!(domains[24]));
                total_sum = total_sum + constraint_coefficients[31] * value;

                // Constraint: final_pc.
                let value = (mask_column_row[0][1] - global_values.final_pc)
                    .field_div(&felt_nonzero!(domains[24]));
                total_sum = total_sum + constraint_coefficients[32] * value;

                // Constraint: memory/multi_column_perm/perm/init0.
                let value = ((global_values.memory_multi_column_perm_perm_interaction_elm
                    - (mask_column_row[0][2]
                        + global_values.memory_multi_column_perm_hash_interaction_elm0
                            * mask_column_row[1][2]))
                    * mask_column_row[0][6]
                    + mask_column_row[0][1]
                    + global_values.memory_multi_column_perm_hash_interaction_elm0
                        * mask_column_row[1][1]
                    - global_values.memory_multi_column_perm_perm_interaction_elm)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[33] * value;

                // Constraint: memory/multi_column_perm/perm/step0.
                let value = ((global_values.memory_multi_column_perm_perm_interaction_elm
                    - (mask_column_row[2][2]
                        + global_values.memory_multi_column_perm_hash_interaction_elm0
                            * mask_column_row[3][2]))
                    * mask_column_row[2][6]
                    - (global_values.memory_multi_column_perm_perm_interaction_elm
                        - (mask_column_row[2][1]
                            + global_values.memory_multi_column_perm_hash_interaction_elm0
                                * mask_column_row[3][1]))
                        * mask_column_row[0][6])
                    * domains[26].field_div(&felt_nonzero!(domains[1]));
                total_sum = total_sum + constraint_coefficients[34] * value;

                // Constraint: memory/multi_column_perm/perm/last.
                let value = (mask_column_row[0][6]
                    - global_values.memory_multi_column_perm_perm_public_memory_prod)
                    .field_div(&felt_nonzero!(domains[26]));
                total_sum = total_sum + constraint_coefficients[35] * value;

                // Constraint: memory/diff_is_bit.
                let value = (memory_address_diff_0 * memory_address_diff_0 - memory_address_diff_0)
                    * domains[26].field_div(&felt_nonzero!(domains[1]));
                total_sum = total_sum + constraint_coefficients[36] * value;

                // Constraint: memory/is_func.
                let value = ((memory_address_diff_0 - FELT_1)
                    * (mask_column_row[1][2] - mask_column_row[3][2]))
                    * domains[26].field_div(&felt_nonzero!(domains[1]));
                total_sum = total_sum + constraint_coefficients[37] * value;

                // Constraint: memory/initial_addr.
                let value = (mask_column_row[0][2] - FELT_1).field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[38] * value;

                // Constraint: public_memory_addr_zero.
                let value = (mask_column_row[2][1]).field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[39] * value;

                // Constraint: public_memory_value_zero.
                let value = (mask_column_row[3][1]).field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[40] * value;

                // Constraint: range_check16/perm/init0.
                let value = ((global_values.range_check16_perm_interaction_elm
                    - mask_column_row[2][4])
                    * mask_column_row[1][7]
                    + mask_column_row[0][4]
                    - global_values.range_check16_perm_interaction_elm)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[41] * value;

                // Constraint: range_check16/perm/step0.
                let value = ((global_values.range_check16_perm_interaction_elm
                    - mask_column_row[6][4])
                    * mask_column_row[5][7]
                    - (global_values.range_check16_perm_interaction_elm - mask_column_row[4][4])
                        * mask_column_row[1][7])
                    * domains[27].field_div(&felt_nonzero!(domains[2]));
                total_sum = total_sum + constraint_coefficients[42] * value;

                // Constraint: range_check16/perm/last.
                let value = (mask_column_row[1][7]
                    - global_values.range_check16_perm_public_memory_prod)
                    .field_div(&felt_nonzero!(domains[27]));
                total_sum = total_sum + constraint_coefficients[43] * value;

                // Constraint: range_check16/diff_is_bit.
                let value = (range_check16_diff_0 * range_check16_diff_0 - range_check16_diff_0)
                    * domains[27].field_div(&felt_nonzero!(domains[2]));
                total_sum = total_sum + constraint_coefficients[44] * value;

                // Constraint: range_check16/minimum.
                let value = (mask_column_row[2][4] - global_values.range_check_min)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[45] * value;

                // Constraint: range_check16/maximum.
                let value = (mask_column_row[2][4] - global_values.range_check_max)
                    .field_div(&felt_nonzero!(domains[27]));
                total_sum = total_sum + constraint_coefficients[46] * value;

                // Constraint: diluted_check/permutation/init0.
                let value = ((global_values.diluted_check_permutation_interaction_elm
                    - mask_column_row[1][3])
                    * mask_column_row[0][7]
                    + mask_column_row[0][3]
                    - global_values.diluted_check_permutation_interaction_elm)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[47] * value;

                // Constraint: diluted_check/permutation/step0.
                let value = ((global_values.diluted_check_permutation_interaction_elm
                    - mask_column_row[3][3])
                    * mask_column_row[2][7]
                    - (global_values.diluted_check_permutation_interaction_elm
                        - mask_column_row[2][3])
                        * mask_column_row[0][7])
                    * domains[26].field_div(&felt_nonzero!(domains[1]));
                total_sum = total_sum + constraint_coefficients[48] * value;

                // Constraint: diluted_check/permutation/last.
                let value = (mask_column_row[0][7]
                    - global_values.diluted_check_permutation_public_memory_prod)
                    .field_div(&felt_nonzero!(domains[26]));
                total_sum = total_sum + constraint_coefficients[49] * value;

                // Constraint: diluted_check/init.
                let value = (mask_column_row[1][6] - FELT_1).field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[50] * value;

                // Constraint: diluted_check/first_element.
                let value = (mask_column_row[1][3] - global_values.diluted_check_first_elm)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[51] * value;

                // Constraint: diluted_check/step.
                let value = (mask_column_row[3][6]
                    - (mask_column_row[1][6]
                        * (FELT_1
                            + global_values.diluted_check_interaction_z
                                * (mask_column_row[3][3] - mask_column_row[1][3])
                            + global_values.diluted_check_interaction_alpha
                                * (mask_column_row[3][3] - mask_column_row[1][3])
                                * (mask_column_row[3][3] - mask_column_row[1][3])))
                        * domains[26].field_div(&felt_nonzero!(domains[1])));
                total_sum = total_sum + constraint_coefficients[52] * value;

                // Constraint: diluted_check/last.
                let value = (mask_column_row[1][6] - global_values.diluted_check_final_cum_val)
                    .field_div(&felt_nonzero!(domains[26]));
                total_sum = total_sum + constraint_coefficients[53] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero.
                let value = (mask_column_row[57][5]
                    * (mask_column_row[3][4] - (mask_column_row[11][4] + mask_column_row[11][4])))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[54] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0.
                let value = (mask_column_row[57][5]
                    * (mask_column_row[11][4]
                        - FELT_3138550867693340381917894711603833208051177722232017256448
                            * mask_column_row[1539][4]))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[55] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192.
                let value = (mask_column_row[57][5]
                    - mask_column_row[2047][4]
                        * (mask_column_row[1539][4]
                            - (mask_column_row[1547][4] + mask_column_row[1547][4])))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[56] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192.
                let value = (mask_column_row[2047][4]
                    * (mask_column_row[1547][4] - FELT_8 * mask_column_row[1571][4]))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[57] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196.
                let value = (mask_column_row[2047][4]
                    - (mask_column_row[2011][4]
                        - (mask_column_row[2019][4] + mask_column_row[2019][4]))
                        * (mask_column_row[1571][4]
                            - (mask_column_row[1579][4] + mask_column_row[1579][4])))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[58] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196.
                let value = ((mask_column_row[2011][4]
                    - (mask_column_row[2019][4] + mask_column_row[2019][4]))
                    * (mask_column_row[1579][4]
                        - FELT_18014398509481984 * mask_column_row[2011][4]))
                    .field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[59] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/booleanity_test.
                let value = (pedersen_hash0_ec_subset_sum_bit_0
                    * (pedersen_hash0_ec_subset_sum_bit_0 - FELT_1))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[60] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/bit_extraction_end.
                let value = (mask_column_row[3][4]).field_div(&felt_nonzero!(domains[21]));
                total_sum = total_sum + constraint_coefficients[61] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/zeros_tail.
                let value = (mask_column_row[3][4]).field_div(&felt_nonzero!(domains[20]));
                total_sum = total_sum + constraint_coefficients[62] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/add_points/slope.
                let value = (pedersen_hash0_ec_subset_sum_bit_0
                    * (mask_column_row[5][4] - global_values.pedersen_points_y)
                    - mask_column_row[7][4]
                        * (mask_column_row[1][4] - global_values.pedersen_points_x))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[63] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/add_points/x.
                let value = (mask_column_row[7][4] * mask_column_row[7][4]
                    - pedersen_hash0_ec_subset_sum_bit_0
                        * (mask_column_row[1][4]
                            + global_values.pedersen_points_x
                            + mask_column_row[9][4]))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[64] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/add_points/y.
                let value = (pedersen_hash0_ec_subset_sum_bit_0
                    * (mask_column_row[5][4] + mask_column_row[13][4])
                    - mask_column_row[7][4] * (mask_column_row[1][4] - mask_column_row[9][4]))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[65] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/copy_point/x.
                let value = (pedersen_hash0_ec_subset_sum_bit_neg_0
                    * (mask_column_row[9][4] - mask_column_row[1][4]))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[66] * value;

                // Constraint: pedersen/hash0/ec_subset_sum/copy_point/y.
                let value = (pedersen_hash0_ec_subset_sum_bit_neg_0
                    * (mask_column_row[13][4] - mask_column_row[5][4]))
                    * domains[20].field_div(&felt_nonzero!(domains[3]));
                total_sum = total_sum + constraint_coefficients[67] * value;

                // Constraint: pedersen/hash0/copy_point/x.
                let value = (mask_column_row[2049][4] - mask_column_row[2041][4])
                    * domains[22].field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[68] * value;

                // Constraint: pedersen/hash0/copy_point/y.
                let value = (mask_column_row[2053][4] - mask_column_row[2045][4])
                    * domains[22].field_div(&felt_nonzero!(domains[19]));
                total_sum = total_sum + constraint_coefficients[69] * value;

                // Constraint: pedersen/hash0/init/x.
                let value = (mask_column_row[1][4] - global_values.pedersen_shift_point.x)
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[70] * value;

                // Constraint: pedersen/hash0/init/y.
                let value = (mask_column_row[5][4] - global_values.pedersen_shift_point.y)
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[71] * value;

                // Constraint: pedersen/input0_value0.
                let value = (mask_column_row[11][1] - mask_column_row[3][4])
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[72] * value;

                // Constraint: pedersen/input0_addr.
                let value = (mask_column_row[4106][1] - (mask_column_row[1034][1] + FELT_1))
                    * domains[28].field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[73] * value;

                // Constraint: pedersen/init_addr.
                let value = (mask_column_row[10][1] - global_values.initial_pedersen_addr)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[74] * value;

                // Constraint: pedersen/input1_value0.
                let value = (mask_column_row[2059][1] - mask_column_row[2051][4])
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[75] * value;

                // Constraint: pedersen/input1_addr.
                let value = (mask_column_row[2058][1] - (mask_column_row[10][1] + FELT_1))
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[76] * value;

                // Constraint: pedersen/output_value0.
                let value = (mask_column_row[1035][1] - mask_column_row[4089][4])
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[77] * value;

                // Constraint: pedersen/output_addr.
                let value = (mask_column_row[1034][1] - (mask_column_row[2058][1] + FELT_1))
                    .field_div(&felt_nonzero!(domains[23]));
                total_sum = total_sum + constraint_coefficients[78] * value;

                // Constraint: range_check_builtin/value.
                let value = (range_check_builtin_value7_0 - mask_column_row[139][1])
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[79] * value;

                // Constraint: range_check_builtin/addr_step.
                let value = (mask_column_row[394][1] - (mask_column_row[138][1] + FELT_1))
                    * domains[29].field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[80] * value;

                // Constraint: range_check_builtin/init_addr.
                let value = (mask_column_row[138][1] - global_values.initial_range_check_addr)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[81] * value;

                // Constraint: bitwise/init_var_pool_addr.
                let value = (mask_column_row[42][1] - global_values.initial_bitwise_addr)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[82] * value;

                // Constraint: bitwise/step_var_pool_addr.
                let value = (mask_column_row[106][1] - (mask_column_row[42][1] + FELT_1))
                    * domains[10].field_div(&felt_nonzero!(domains[7]));
                total_sum = total_sum + constraint_coefficients[83] * value;

                // Constraint: bitwise/x_or_y_addr.
                let value = (mask_column_row[74][1] - (mask_column_row[234][1] + FELT_1))
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[84] * value;

                // Constraint: bitwise/next_var_pool_addr.
                let value = (mask_column_row[298][1] - (mask_column_row[74][1] + FELT_1))
                    * domains[29].field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[85] * value;

                // Constraint: bitwise/partition.
                let value = (bitwise_sum_var_0_0 + bitwise_sum_var_8_0 - mask_column_row[43][1])
                    .field_div(&felt_nonzero!(domains[7]));
                total_sum = total_sum + constraint_coefficients[86] * value;

                // Constraint: bitwise/or_is_and_plus_xor.
                let value = (mask_column_row[75][1]
                    - (mask_column_row[171][1] + mask_column_row[235][1]))
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[87] * value;

                // Constraint: bitwise/addition_is_xor_with_and.
                let value = (mask_column_row[0][3] + mask_column_row[64][3]
                    - (mask_column_row[192][3]
                        + mask_column_row[128][3]
                        + mask_column_row[128][3]))
                    .field_div(&felt_nonzero!(domains[11]));
                total_sum = total_sum + constraint_coefficients[88] * value;

                // Constraint: bitwise/unique_unpacking192.
                let value = ((mask_column_row[176][3] + mask_column_row[240][3]) * FELT_16
                    - mask_column_row[2][3])
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[89] * value;

                // Constraint: bitwise/unique_unpacking193.
                let value = ((mask_column_row[180][3] + mask_column_row[244][3]) * FELT_16
                    - mask_column_row[130][3])
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[90] * value;

                // Constraint: bitwise/unique_unpacking194.
                let value = ((mask_column_row[184][3] + mask_column_row[248][3]) * FELT_16
                    - mask_column_row[66][3])
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[91] * value;

                // Constraint: bitwise/unique_unpacking195.
                let value = ((mask_column_row[188][3] + mask_column_row[252][3]) * FELT_256
                    - mask_column_row[194][3])
                    .field_div(&felt_nonzero!(domains[9]));
                total_sum = total_sum + constraint_coefficients[92] * value;

                // Constraint: poseidon/param_0/init_input_output_addr.
                let value = (mask_column_row[266][1] - global_values.initial_poseidon_addr)
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[93] * value;

                // Constraint: poseidon/param_0/addr_input_output_step.
                let value = (mask_column_row[778][1] - (mask_column_row[266][1] + FELT_3))
                    * domains[30].field_div(&felt_nonzero!(domains[12]));
                total_sum = total_sum + constraint_coefficients[94] * value;

                // Constraint: poseidon/param_1/init_input_output_addr.
                let value = (mask_column_row[202][1]
                    - (global_values.initial_poseidon_addr + FELT_1))
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[95] * value;

                // Constraint: poseidon/param_1/addr_input_output_step.
                let value = (mask_column_row[714][1] - (mask_column_row[202][1] + FELT_3))
                    * domains[30].field_div(&felt_nonzero!(domains[12]));
                total_sum = total_sum + constraint_coefficients[96] * value;

                // Constraint: poseidon/param_2/init_input_output_addr.
                let value = (mask_column_row[458][1]
                    - (global_values.initial_poseidon_addr + FELT_2))
                    .field_div(&felt_nonzero!(domains[25]));
                total_sum = total_sum + constraint_coefficients[97] * value;

                // Constraint: poseidon/param_2/addr_input_output_step.
                let value = (mask_column_row[970][1] - (mask_column_row[458][1] + FELT_3))
                    * domains[30].field_div(&felt_nonzero!(domains[12]));
                total_sum = total_sum + constraint_coefficients[98] * value;

                // Constraint: poseidon/poseidon/full_rounds_state0_squaring.
                let value = (mask_column_row[9][5] * mask_column_row[9][5]
                    - mask_column_row[105][5])
                    .field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[99] * value;

                // Constraint: poseidon/poseidon/full_rounds_state1_squaring.
                let value = (mask_column_row[73][5] * mask_column_row[73][5]
                    - mask_column_row[25][5])
                    .field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[100] * value;

                // Constraint: poseidon/poseidon/full_rounds_state2_squaring.
                let value = (mask_column_row[41][5] * mask_column_row[41][5]
                    - mask_column_row[89][5])
                    .field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[101] * value;

                // Constraint: poseidon/poseidon/partial_rounds_state0_squaring.
                let value = (mask_column_row[6][5] * mask_column_row[6][5]
                    - mask_column_row[14][5])
                    .field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[102] * value;

                // Constraint: poseidon/poseidon/partial_rounds_state1_squaring.
                let value = (mask_column_row[1][5] * mask_column_row[1][5]
                    - mask_column_row[17][5])
                    * domains[15].field_div(&felt_nonzero!(domains[6]));
                total_sum = total_sum + constraint_coefficients[103] * value;

                // Constraint: poseidon/poseidon/add_first_round_key0.
                let value = (mask_column_row[267][1]
                        + FELT_2950795762459345168613727575620414179244544320470208355568817838579231751791
                        - mask_column_row[9][5])
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[104] * value;

                // Constraint: poseidon/poseidon/add_first_round_key1.
                let value = (mask_column_row[203][1]
                        + FELT_1587446564224215276866294500450702039420286416111469274423465069420553242820
                        - mask_column_row[73][5])
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[105] * value;

                // Constraint: poseidon/poseidon/add_first_round_key2.
                let value = (mask_column_row[459][1]
                        + FELT_1645965921169490687904413452218868659025437693527479459426157555728339600137
                        - mask_column_row[41][5])
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[106] * value;

                // Constraint: poseidon/poseidon/full_round0.
                let value = (mask_column_row[137][5]
                    - (poseidon_poseidon_full_rounds_state0_cubed_0
                        + poseidon_poseidon_full_rounds_state0_cubed_0
                        + poseidon_poseidon_full_rounds_state0_cubed_0
                        + poseidon_poseidon_full_rounds_state1_cubed_0
                        + poseidon_poseidon_full_rounds_state2_cubed_0
                        + global_values.poseidon_poseidon_full_round_key0))
                    * domains[13].field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[107] * value;

                // Constraint: poseidon/poseidon/full_round1.
                let value = (mask_column_row[201][5]
                    + poseidon_poseidon_full_rounds_state1_cubed_0
                    - (poseidon_poseidon_full_rounds_state0_cubed_0
                        + poseidon_poseidon_full_rounds_state2_cubed_0
                        + global_values.poseidon_poseidon_full_round_key1))
                    * domains[13].field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[108] * value;

                // Constraint: poseidon/poseidon/full_round2.
                let value = (mask_column_row[169][5]
                    + poseidon_poseidon_full_rounds_state2_cubed_0
                    + poseidon_poseidon_full_rounds_state2_cubed_0
                    - (poseidon_poseidon_full_rounds_state0_cubed_0
                        + poseidon_poseidon_full_rounds_state1_cubed_0
                        + global_values.poseidon_poseidon_full_round_key2))
                    * domains[13].field_div(&felt_nonzero!(domains[8]));
                total_sum = total_sum + constraint_coefficients[109] * value;

                // Constraint: poseidon/poseidon/last_full_round0.
                let value = (mask_column_row[779][1]
                    - (poseidon_poseidon_full_rounds_state0_cubed_7
                        + poseidon_poseidon_full_rounds_state0_cubed_7
                        + poseidon_poseidon_full_rounds_state0_cubed_7
                        + poseidon_poseidon_full_rounds_state1_cubed_7
                        + poseidon_poseidon_full_rounds_state2_cubed_7))
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[110] * value;

                // Constraint: poseidon/poseidon/last_full_round1.
                let value = (mask_column_row[715][1]
                    + poseidon_poseidon_full_rounds_state1_cubed_7
                    - (poseidon_poseidon_full_rounds_state0_cubed_7
                        + poseidon_poseidon_full_rounds_state2_cubed_7))
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[111] * value;

                // Constraint: poseidon/poseidon/last_full_round2.
                let value = (mask_column_row[971][1]
                    + poseidon_poseidon_full_rounds_state2_cubed_7
                    + poseidon_poseidon_full_rounds_state2_cubed_7
                    - (poseidon_poseidon_full_rounds_state0_cubed_7
                        + poseidon_poseidon_full_rounds_state1_cubed_7))
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[112] * value;

                // Constraint: poseidon/poseidon/copy_partial_rounds0_i0.
                let value = (mask_column_row[982][1] - mask_column_row[1][1])
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[113] * value;

                // Constraint: poseidon/poseidon/copy_partial_rounds0_i1.
                let value = (mask_column_row[998][1] - mask_column_row[33][1])
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[114] * value;

                // Constraint: poseidon/poseidon/copy_partial_rounds0_i2.
                let value = (mask_column_row[1014][1] - mask_column_row[65][1])
                    .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[115] * value;

                // Constraint: poseidon/poseidon/margin_full_to_partial0.
                let value = (mask_column_row[6][1]
                        + poseidon_poseidon_full_rounds_state2_cubed_3
                        + poseidon_poseidon_full_rounds_state2_cubed_3
                        - (poseidon_poseidon_full_rounds_state0_cubed_3
                            + poseidon_poseidon_full_rounds_state1_cubed_3
                            + FELT_2121140748740143694053732746913428481442990369183417228688865837805149503386))
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[116] * value;

                // Constraint: poseidon/poseidon/margin_full_to_partial1.
                let value = (mask_column_row[22][1]
                        - (FELT_3618502788666131213697322783095070105623107215331596699973092056135872020477
                            * poseidon_poseidon_full_rounds_state1_cubed_3
                            + FELT_10 * poseidon_poseidon_full_rounds_state2_cubed_3
                            + FELT_4 * mask_column_row[6][1]
                            + FELT_3618502788666131213697322783095070105623107215331596699973092056135872020479
                                * poseidon_poseidon_partial_rounds_state0_cubed_0
                            + FELT_2006642341318481906727563724340978325665491359415674592697055778067937914672))
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[117] * value;

                // Constraint: poseidon/poseidon/margin_full_to_partial2.
                let value = (mask_column_row[38][1]
                        - (FELT_8 * poseidon_poseidon_full_rounds_state2_cubed_3
                            + FELT_4 * mask_column_row[6][1]
                            + FELT_6 * poseidon_poseidon_partial_rounds_state0_cubed_0
                            + mask_column_row[22][1]
                            + mask_column_row[22][1]
                            + FELT_3618502788666131213697322783095070105623107215331596699973092056135872020479
                                * poseidon_poseidon_partial_rounds_state0_cubed_1
                            + FELT_427751140904099001132521606468025610873158555767197326325930641757709538586))
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[118] * value;

                // Constraint: poseidon/poseidon/partial_round0.
                let value = (mask_column_row[54][1]
                        - (FELT_8 * poseidon_poseidon_partial_rounds_state0_cubed_0
                            + FELT_4 * mask_column_row[22][1]
                            + FELT_6 * poseidon_poseidon_partial_rounds_state0_cubed_1
                            + mask_column_row[38][1]
                            + mask_column_row[38][1]
                            + FELT_3618502788666131213697322783095070105623107215331596699973092056135872020479
                                * poseidon_poseidon_partial_rounds_state0_cubed_2
                            + global_values.poseidon_poseidon_partial_round_key0))
                        * domains[17].field_div(&felt_nonzero!(domains[5]));
                total_sum = total_sum + constraint_coefficients[119] * value;

                // Constraint: poseidon/poseidon/partial_round1.
                let value = (mask_column_row[97][1]
                        - (FELT_8 * poseidon_poseidon_partial_rounds_state1_cubed_0
                            + FELT_4 * mask_column_row[33][1]
                            + FELT_6 * poseidon_poseidon_partial_rounds_state1_cubed_1
                            + mask_column_row[65][1]
                            + mask_column_row[65][1]
                            + FELT_3618502788666131213697322783095070105623107215331596699973092056135872020479
                                * poseidon_poseidon_partial_rounds_state1_cubed_2
                            + global_values.poseidon_poseidon_partial_round_key1))
                        * domains[18].field_div(&felt_nonzero!(domains[6]));
                total_sum = total_sum + constraint_coefficients[120] * value;

                // Constraint: poseidon/poseidon/margin_partial_to_full0.
                let value = (mask_column_row[521][1]
                        - (FELT_16 * poseidon_poseidon_partial_rounds_state1_cubed_19
                            + FELT_8 * mask_column_row[641][1]
                            + FELT_16 * poseidon_poseidon_partial_rounds_state1_cubed_20
                            + FELT_6 * mask_column_row[673][1]
                            + poseidon_poseidon_partial_rounds_state1_cubed_21
                            + FELT_560279373700919169769089400651532183647886248799764942664266404650165812023))
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[121] * value;

                // Constraint: poseidon/poseidon/margin_partial_to_full1.
                let value = (mask_column_row[585][1]
                        - (FELT_4 * poseidon_poseidon_partial_rounds_state1_cubed_20
                            + mask_column_row[673][1]
                            + mask_column_row[673][1]
                            + poseidon_poseidon_partial_rounds_state1_cubed_21
                            + FELT_1401754474293352309994371631695783042590401941592571735921592823982231996415))
                        .field_div(&felt_nonzero!(domains[16]));
                total_sum = total_sum + constraint_coefficients[122] * value;

                // Constraint: poseidon/poseidon/margin_partial_to_full2.
                let value = (mask_column_row[553][1]
                        - (FELT_8 * poseidon_poseidon_partial_rounds_state1_cubed_19
                            + FELT_4 * mask_column_row[641][1]
                            + FELT_6 * poseidon_poseidon_partial_rounds_state1_cubed_20
                            + mask_column_row[673][1]
                            + mask_column_row[673][1]
                            + FELT_3618502788666131213697322783095070105623107215331596699973092056135872020479
                                * poseidon_poseidon_partial_rounds_state1_cubed_21
                            + FELT_1246177936547655338400308396717835700699368047388302793172818304164989556526))
                        .field_div(&felt_nonzero!(domains[16]));

                total_sum = total_sum + constraint_coefficients[123] * value;

                stack.push_front(&total_sum.to_bytes_be()).unwrap();

                self.phase = EvalCompositionPolynomialInnerPhase::Finalize;

                vec![]
            }

            EvalCompositionPolynomialInnerPhase::Finalize => {
                stack.push_front(&self.total_sum.to_bytes_be()).unwrap();
                self.phase = EvalCompositionPolynomialInnerPhase::Done;
                vec![]
            }

            EvalCompositionPolynomialInnerPhase::Done => {
                vec![]
            }
        }
    }

    fn is_finished(&mut self) -> bool {
        self.phase == EvalCompositionPolynomialInnerPhase::Done
    }
}
