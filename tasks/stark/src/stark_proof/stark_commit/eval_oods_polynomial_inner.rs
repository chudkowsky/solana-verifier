use crate::swiftness::air::consts::*;
use crate::swiftness::air::recursive_with_poseidon::autogenerated;
use crate::swiftness::air::recursive_with_poseidon::consts::FELT_1;
use crate::swiftness::stark::types::StarkProof;
use felt::felt_nonzero;
use felt::Felt;
use utils::CONSTRAINT_DEGREE;
use utils::{impl_type_identifiable, BidirectionalStack, Executable, ProofData, TypeIdentifiable};

#[repr(C)]
pub struct EvalOodsPolynomialInner {
    phase: EvalOodsPolynomialInnerPhase,
    current_step: usize,
    total_sum: Felt,
    point: Felt,
    oods_point: Felt,
    trace_generator: Felt,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum EvalOodsPolynomialInnerPhase {
    ComputePowers,
    ComputeConstraints,
    Done,
}

impl_type_identifiable!(EvalOodsPolynomialInner);

impl EvalOodsPolynomialInner {
    pub fn new() -> Self {
        Self {
            phase: EvalOodsPolynomialInnerPhase::ComputePowers,
            current_step: 0,
            total_sum: Felt::ZERO,
            point: Felt::ZERO,
            oods_point: Felt::ZERO,
            trace_generator: Felt::ZERO,
        }
    }
}

impl Default for EvalOodsPolynomialInner {
    fn default() -> Self {
        Self::new()
    }
}

impl Executable for EvalOodsPolynomialInner {
    fn execute<T: BidirectionalStack + ProofData>(&mut self, stack: &mut T) -> Vec<Vec<u8>> {
        match self.phase {
            EvalOodsPolynomialInnerPhase::ComputePowers => {
                self.point = Felt::from_bytes_be_slice(stack.borrow_front());
                stack.pop_front();
                self.oods_point = Felt::from_bytes_be_slice(stack.borrow_front());
                stack.pop_front();
                self.trace_generator = Felt::from_bytes_be_slice(stack.borrow_front());
                stack.pop_front();

                // Get pre-allocated arrays
                let autogenerated_pows = stack.get_autogenerated_pows_mut();

                // Compute powers following the original algorithm
                // This is a simplified version - the full implementation would include all 134 powers
                autogenerated_pows[0] = self.trace_generator.pow_felt(&(FELT_0));
                autogenerated_pows[1] = self.trace_generator.pow_felt(&(FELT_4089));
                autogenerated_pows[2] = self.trace_generator.pow_felt(&(FELT_2011));
                autogenerated_pows[3] = self.trace_generator.pow_felt(&(FELT_1539));
                autogenerated_pows[4] = self.trace_generator.pow_felt(&(FELT_1));
                autogenerated_pows[5] = autogenerated_pows[4] * autogenerated_pows[4]; // pow(trace_generator, 2)
                autogenerated_pows[6] = autogenerated_pows[4] * autogenerated_pows[5]; // pow(trace_generator, 3)
                autogenerated_pows[7] = autogenerated_pows[4] * autogenerated_pows[6]; // pow(trace_generator, 4)
                autogenerated_pows[8] = autogenerated_pows[4] * autogenerated_pows[7]; // pow(trace_generator, 5)
                autogenerated_pows[9] = autogenerated_pows[4] * autogenerated_pows[8]; // pow(trace_generator, 6)
                autogenerated_pows[10] = autogenerated_pows[4] * autogenerated_pows[9]; // pow(trace_generator, 7)
                autogenerated_pows[11] = autogenerated_pows[4] * autogenerated_pows[10]; // pow(trace_generator, 8)
                autogenerated_pows[12] = autogenerated_pows[3] * autogenerated_pows[11]; // pow(trace_generator, 1547)
                autogenerated_pows[13] = autogenerated_pows[4] * autogenerated_pows[11]; // pow(trace_generator, 9)
                autogenerated_pows[14] = autogenerated_pows[4] * autogenerated_pows[13]; // pow(trace_generator, 10)
                autogenerated_pows[15] = autogenerated_pows[4] * autogenerated_pows[14]; // pow(trace_generator, 11)
                autogenerated_pows[16] = autogenerated_pows[4] * autogenerated_pows[15]; // pow(trace_generator, 12)
                autogenerated_pows[17] = autogenerated_pows[4] * autogenerated_pows[16]; // pow(trace_generator, 13)
                autogenerated_pows[18] = autogenerated_pows[4] * autogenerated_pows[17]; // pow(trace_generator, 14)
                autogenerated_pows[19] = autogenerated_pows[4] * autogenerated_pows[18]; // pow(trace_generator, 15)
                autogenerated_pows[20] = autogenerated_pows[4] * autogenerated_pows[19]; // pow(trace_generator, 16)
                autogenerated_pows[21] = autogenerated_pows[4] * autogenerated_pows[20]; // pow(trace_generator, 17)
                autogenerated_pows[22] = autogenerated_pows[6] * autogenerated_pows[21]; // pow(trace_generator, 20)
                autogenerated_pows[23] = autogenerated_pows[5] * autogenerated_pows[22]; // pow(trace_generator, 22)
                autogenerated_pows[24] = autogenerated_pows[5] * autogenerated_pows[23]; // pow(trace_generator, 24)
                autogenerated_pows[25] = autogenerated_pows[4] * autogenerated_pows[24]; // pow(trace_generator, 25)
                autogenerated_pows[26] = autogenerated_pows[6] * autogenerated_pows[25]; // pow(trace_generator, 28)
                autogenerated_pows[27] = autogenerated_pows[5] * autogenerated_pows[26]; // pow(trace_generator, 30)
                autogenerated_pows[28] = autogenerated_pows[5] * autogenerated_pows[27]; // pow(trace_generator, 32)
                autogenerated_pows[29] = autogenerated_pows[4] * autogenerated_pows[28]; // pow(trace_generator, 33)
                autogenerated_pows[30] = autogenerated_pows[3] * autogenerated_pows[28]; // pow(trace_generator, 1571)
                autogenerated_pows[31] = autogenerated_pows[6] * autogenerated_pows[29]; // pow(trace_generator, 36)
                autogenerated_pows[32] = autogenerated_pows[5] * autogenerated_pows[31]; // pow(trace_generator, 38)
                autogenerated_pows[33] = autogenerated_pows[5] * autogenerated_pows[32]; // pow(trace_generator, 40)
                autogenerated_pows[34] = autogenerated_pows[4] * autogenerated_pows[33]; // pow(trace_generator, 41)
                autogenerated_pows[35] = autogenerated_pows[4] * autogenerated_pows[34]; // pow(trace_generator, 42)
                autogenerated_pows[36] = autogenerated_pows[4] * autogenerated_pows[35]; // pow(trace_generator, 43)
                autogenerated_pows[37] = autogenerated_pows[4] * autogenerated_pows[36]; // pow(trace_generator, 44)
                autogenerated_pows[38] = autogenerated_pows[5] * autogenerated_pows[37]; // pow(trace_generator, 46)
                autogenerated_pows[39] = autogenerated_pows[5] * autogenerated_pows[38]; // pow(trace_generator, 48)
                autogenerated_pows[40] = autogenerated_pows[4] * autogenerated_pows[39]; // pow(trace_generator, 49)
                autogenerated_pows[41] = autogenerated_pows[6] * autogenerated_pows[40]; // pow(trace_generator, 52)
                autogenerated_pows[42] = autogenerated_pows[5] * autogenerated_pows[41]; // pow(trace_generator, 54)
                autogenerated_pows[43] = autogenerated_pows[5] * autogenerated_pows[42]; // pow(trace_generator, 56)
                autogenerated_pows[44] = autogenerated_pows[4] * autogenerated_pows[43]; // pow(trace_generator, 57)
                autogenerated_pows[45] = autogenerated_pows[6] * autogenerated_pows[44]; // pow(trace_generator, 60)
                autogenerated_pows[46] = autogenerated_pows[7] * autogenerated_pows[45]; // pow(trace_generator, 64)
                autogenerated_pows[47] = autogenerated_pows[4] * autogenerated_pows[46]; // pow(trace_generator, 65)
                autogenerated_pows[48] = autogenerated_pows[4] * autogenerated_pows[47]; // pow(trace_generator, 66)
                autogenerated_pows[49] = autogenerated_pows[10] * autogenerated_pows[48]; // pow(trace_generator, 73)
                autogenerated_pows[50] = autogenerated_pows[4] * autogenerated_pows[49]; // pow(trace_generator, 74)
                autogenerated_pows[51] = autogenerated_pows[4] * autogenerated_pows[50]; // pow(trace_generator, 75)
                autogenerated_pows[52] = autogenerated_pows[4] * autogenerated_pows[51]; // pow(trace_generator, 76)
                autogenerated_pows[53] = autogenerated_pows[8] * autogenerated_pows[52]; // pow(trace_generator, 81)
                autogenerated_pows[54] = autogenerated_pows[11] * autogenerated_pows[53]; // pow(trace_generator, 89)
                autogenerated_pows[55] = autogenerated_pows[11] * autogenerated_pows[54]; // pow(trace_generator, 97)
                autogenerated_pows[56] = autogenerated_pows[11] * autogenerated_pows[55]; // pow(trace_generator, 105)
                autogenerated_pows[57] = autogenerated_pows[4] * autogenerated_pows[56]; // pow(trace_generator, 106)
                autogenerated_pows[58] = autogenerated_pows[5] * autogenerated_pows[57]; // pow(trace_generator, 108)
                autogenerated_pows[59] = autogenerated_pows[22] * autogenerated_pows[58]; // pow(trace_generator, 128)
                autogenerated_pows[60] = autogenerated_pows[5] * autogenerated_pows[59]; // pow(trace_generator, 130)
                autogenerated_pows[61] = autogenerated_pows[10] * autogenerated_pows[60]; // pow(trace_generator, 137)
                autogenerated_pows[62] = autogenerated_pows[4] * autogenerated_pows[61]; // pow(trace_generator, 138)
                autogenerated_pows[63] = autogenerated_pows[4] * autogenerated_pows[62]; // pow(trace_generator, 139)
                autogenerated_pows[64] = autogenerated_pows[27] * autogenerated_pows[63]; // pow(trace_generator, 169)
                autogenerated_pows[65] = autogenerated_pows[5] * autogenerated_pows[64]; // pow(trace_generator, 171)
                autogenerated_pows[66] = autogenerated_pows[4] * autogenerated_pows[63]; // pow(trace_generator, 140)
                autogenerated_pows[67] = autogenerated_pows[4] * autogenerated_pows[65]; // pow(trace_generator, 172)
                autogenerated_pows[68] = autogenerated_pows[7] * autogenerated_pows[67]; // pow(trace_generator, 176)
                autogenerated_pows[69] = autogenerated_pows[7] * autogenerated_pows[68]; // pow(trace_generator, 180)
                autogenerated_pows[70] = autogenerated_pows[7] * autogenerated_pows[69]; // pow(trace_generator, 184)
                autogenerated_pows[71] = autogenerated_pows[7] * autogenerated_pows[70]; // pow(trace_generator, 188)
                autogenerated_pows[72] = autogenerated_pows[7] * autogenerated_pows[71]; // pow(trace_generator, 192)
                autogenerated_pows[73] = autogenerated_pows[5] * autogenerated_pows[72]; // pow(trace_generator, 194)
                autogenerated_pows[74] = autogenerated_pows[10] * autogenerated_pows[73]; // pow(trace_generator, 201)
                autogenerated_pows[75] = autogenerated_pows[4] * autogenerated_pows[74]; // pow(trace_generator, 202)
                autogenerated_pows[76] = autogenerated_pows[4] * autogenerated_pows[75]; // pow(trace_generator, 203)
                autogenerated_pows[77] = autogenerated_pows[72] * autogenerated_pows[74]; // pow(trace_generator, 393)
                autogenerated_pows[78] = autogenerated_pows[4] * autogenerated_pows[76]; // pow(trace_generator, 204)
                autogenerated_pows[79] = autogenerated_pows[27] * autogenerated_pows[78]; // pow(trace_generator, 234)
                autogenerated_pows[80] = autogenerated_pows[4] * autogenerated_pows[79]; // pow(trace_generator, 235)
                autogenerated_pows[81] = autogenerated_pows[4] * autogenerated_pows[80]; // pow(trace_generator, 236)
                autogenerated_pows[82] = autogenerated_pows[7] * autogenerated_pows[81]; // pow(trace_generator, 240)
                autogenerated_pows[83] = autogenerated_pows[7] * autogenerated_pows[82]; // pow(trace_generator, 244)
                autogenerated_pows[84] = autogenerated_pows[7] * autogenerated_pows[83]; // pow(trace_generator, 248)
                autogenerated_pows[85] = autogenerated_pows[7] * autogenerated_pows[84]; // pow(trace_generator, 252)
                autogenerated_pows[86] = autogenerated_pows[18] * autogenerated_pows[85]; // pow(trace_generator, 266)
                autogenerated_pows[87] = autogenerated_pows[4] * autogenerated_pows[86]; // pow(trace_generator, 267)
                autogenerated_pows[88] = autogenerated_pows[4] * autogenerated_pows[77]; // pow(trace_generator, 394)
                autogenerated_pows[89] = autogenerated_pows[19] * autogenerated_pows[88]; // pow(trace_generator, 409)
                autogenerated_pows[90] = autogenerated_pows[20] * autogenerated_pows[89]; // pow(trace_generator, 425)
                autogenerated_pows[91] = autogenerated_pows[28] * autogenerated_pows[90]; // pow(trace_generator, 457)
                autogenerated_pows[92] = autogenerated_pows[4] * autogenerated_pows[91]; // pow(trace_generator, 458)
                autogenerated_pows[93] = autogenerated_pows[4] * autogenerated_pows[92]; // pow(trace_generator, 459)
                autogenerated_pows[94] = autogenerated_pows[18] * autogenerated_pows[93]; // pow(trace_generator, 473)
                autogenerated_pows[95] = autogenerated_pows[20] * autogenerated_pows[94]; // pow(trace_generator, 489)
                autogenerated_pows[96] = autogenerated_pows[28] * autogenerated_pows[95]; // pow(trace_generator, 521)
                autogenerated_pows[97] = autogenerated_pows[28] * autogenerated_pows[96]; // pow(trace_generator, 553)
                autogenerated_pows[98] = autogenerated_pows[28] * autogenerated_pows[97]; // pow(trace_generator, 585)
                autogenerated_pows[99] = autogenerated_pows[24] * autogenerated_pows[98]; // pow(trace_generator, 609)
                autogenerated_pows[100] = autogenerated_pows[20] * autogenerated_pows[99]; // pow(trace_generator, 625)
                autogenerated_pows[101] = autogenerated_pows[20] * autogenerated_pows[100]; // pow(trace_generator, 641)
                autogenerated_pows[102] = autogenerated_pows[20] * autogenerated_pows[101]; // pow(trace_generator, 657)
                autogenerated_pows[103] = autogenerated_pows[84] * autogenerated_pows[102]; // pow(trace_generator, 905)
                autogenerated_pows[104] = autogenerated_pows[20] * autogenerated_pows[102]; // pow(trace_generator, 673)
                autogenerated_pows[105] = autogenerated_pows[20] * autogenerated_pows[103]; // pow(trace_generator, 921)
                autogenerated_pows[106] = autogenerated_pows[20] * autogenerated_pows[104]; // pow(trace_generator, 689)
                autogenerated_pows[107] = autogenerated_pows[20] * autogenerated_pows[105]; // pow(trace_generator, 937)
                autogenerated_pows[108] = autogenerated_pows[28] * autogenerated_pows[107]; // pow(trace_generator, 969)
                autogenerated_pows[109] = autogenerated_pows[25] * autogenerated_pows[106]; // pow(trace_generator, 714)
                autogenerated_pows[110] = autogenerated_pows[46] * autogenerated_pows[109]; // pow(trace_generator, 778)
                autogenerated_pows[111] = autogenerated_pows[4] * autogenerated_pows[108]; // pow(trace_generator, 970)
                autogenerated_pows[112] = autogenerated_pows[3] * autogenerated_pows[33]; // pow(trace_generator, 1579)
                autogenerated_pows[113] = autogenerated_pows[4] * autogenerated_pows[109]; // pow(trace_generator, 715)
                autogenerated_pows[114] = autogenerated_pows[4] * autogenerated_pows[110]; // pow(trace_generator, 779)
                autogenerated_pows[115] = autogenerated_pows[28] * autogenerated_pows[86]; // pow(trace_generator, 298)
                autogenerated_pows[116] = autogenerated_pows[4] * autogenerated_pows[111]; // pow(trace_generator, 971)
                autogenerated_pows[117] = autogenerated_pows[15] * autogenerated_pows[116]; // pow(trace_generator, 982)
                autogenerated_pows[118] = autogenerated_pows[6] * autogenerated_pows[117]; // pow(trace_generator, 985)
                autogenerated_pows[119] = autogenerated_pows[17] * autogenerated_pows[118]; // pow(trace_generator, 998)
                autogenerated_pows[120] = autogenerated_pows[6] * autogenerated_pows[119]; // pow(trace_generator, 1001)
                autogenerated_pows[121] = autogenerated_pows[17] * autogenerated_pows[120]; // pow(trace_generator, 1014)
                autogenerated_pows[122] = autogenerated_pows[22] * autogenerated_pows[121]; // pow(trace_generator, 1034)
                autogenerated_pows[123] = autogenerated_pows[2] * autogenerated_pows[11]; // pow(trace_generator, 2019)
                autogenerated_pows[124] = autogenerated_pows[2] * autogenerated_pows[27]; // pow(trace_generator, 2041)
                autogenerated_pows[125] = autogenerated_pows[7] * autogenerated_pows[124]; // pow(trace_generator, 2045)
                autogenerated_pows[126] = autogenerated_pows[2] * autogenerated_pows[31]; // pow(trace_generator, 2047)
                autogenerated_pows[127] = autogenerated_pows[4] * autogenerated_pows[122]; // pow(trace_generator, 1035)
                autogenerated_pows[128] = autogenerated_pows[2] * autogenerated_pows[32]; // pow(trace_generator, 2049)
                autogenerated_pows[129] = autogenerated_pows[2] * autogenerated_pows[33]; // pow(trace_generator, 2051)
                autogenerated_pows[130] = autogenerated_pows[2] * autogenerated_pows[35]; // pow(trace_generator, 2053)
                autogenerated_pows[131] = autogenerated_pows[8] * autogenerated_pows[130]; // pow(trace_generator, 2058)
                autogenerated_pows[132] = autogenerated_pows[2] * autogenerated_pows[39]; // pow(trace_generator, 2059)
                autogenerated_pows[133] = autogenerated_pows[1] * autogenerated_pows[21]; // pow(trace_generator, 4106)

                self.phase = EvalOodsPolynomialInnerPhase::ComputeConstraints;
                vec![]
            }

            EvalOodsPolynomialInnerPhase::ComputeConstraints => {
                // Get all references at once to avoid borrowing conflicts
                let (
                    _,
                    autogenerated_pows,
                    _,
                    oods_values,
                    _,
                    constraint_coefficients,
                    column_values,
                ) = stack.get_proof_data_references::<StarkProof>();

                // Fetch columns
                let column0 = column_values[0];
                let column1 = column_values[1];
                let column2 = column_values[2];
                let column3 = column_values[3];
                let column4 = column_values[4];
                let column5 = column_values[5];
                let column6 = column_values[6];
                let column7 = column_values[7];

                // Sum the OODS constraints on the trace polynomials
                let mut total_sum = FELT_0;

                // All 194 constraints from autogenerated_oods.rs
                let value = (column0 - oods_values[0]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[0] * value;

                let value = (column0 - oods_values[1]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[1] * value;

                let value = (column0 - oods_values[2]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[2] * value;

                let value = (column0 - oods_values[3]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[3] * value;

                let value = (column0 - oods_values[4]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[7] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[4] * value;

                let value = (column0 - oods_values[5]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[8] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[5] * value;

                let value = (column0 - oods_values[6]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[9] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[6] * value;

                let value = (column0 - oods_values[7]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[10] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[7] * value;

                let value = (column0 - oods_values[8]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[11] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[8] * value;

                let value = (column0 - oods_values[9]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[13] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[9] * value;

                let value = (column0 - oods_values[10]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[14] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[10] * value;

                let value = (column0 - oods_values[11]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[15] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[11] * value;

                let value = (column0 - oods_values[12]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[16] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[12] * value;

                let value = (column0 - oods_values[13]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[17] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[13] * value;

                let value = (column0 - oods_values[14]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[18] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[14] * value;

                let value = (column0 - oods_values[15]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[19] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[15] * value;

                let value = (column1 - oods_values[16]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[16] * value;

                let value = (column1 - oods_values[17]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[17] * value;

                let value = (column1 - oods_values[18]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[18] * value;

                let value = (column1 - oods_values[19]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[19] * value;

                let value = (column1 - oods_values[20]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[7] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[20] * value;

                let value = (column1 - oods_values[21]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[8] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[21] * value;

                let value = (column1 - oods_values[22]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[11] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[22] * value;

                let value = (column1 - oods_values[23]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[13] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[23] * value;

                let value = (column1 - oods_values[24]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[14] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[24] * value;

                let value = (column1 - oods_values[25]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[15] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[25] * value;

                let value = (column1 - oods_values[26]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[16] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[26] * value;

                let value = (column1 - oods_values[27]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[17] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[27] * value;

                let value = (column1 - oods_values[28]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[20] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[28] * value;

                let value = (column1 - oods_values[29]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[35] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[29] * value;

                let value = (column1 - oods_values[30]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[36] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[30] * value;

                let value = (column1 - oods_values[31]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[50] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[31] * value;

                let value = (column1 - oods_values[32]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[51] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[32] * value;

                let value = (column1 - oods_values[33]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[57] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[33] * value;

                let value = (column1 - oods_values[34]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[62] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[34] * value;

                let value = (column1 - oods_values[35]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[63] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[35] * value;

                let value = (column1 - oods_values[36]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[65] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[36] * value;

                let value = (column1 - oods_values[37]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[75] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[37] * value;

                let value = (column1 - oods_values[38]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[76] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[38] * value;

                let value = (column1 - oods_values[39]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[79] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[39] * value;

                let value = (column1 - oods_values[40]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[80] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[40] * value;

                let value = (column1 - oods_values[41]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[86] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[41] * value;

                let value = (column1 - oods_values[42]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[87] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[42] * value;

                let value = (column1 - oods_values[43]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[115] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[43] * value;

                let value = (column1 - oods_values[44]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[88] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[44] * value;

                let value = (column1 - oods_values[45]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[92] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[45] * value;

                let value = (column1 - oods_values[46]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[93] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[46] * value;

                let value = (column1 - oods_values[47]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[109] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[47] * value;

                let value = (column1 - oods_values[48]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[113] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[48] * value;

                let value = (column1 - oods_values[49]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[110] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[49] * value;

                let value = (column1 - oods_values[50]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[114] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[50] * value;

                let value = (column1 - oods_values[51]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[111] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[51] * value;

                let value = (column1 - oods_values[52]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[116] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[52] * value;

                let value = (column1 - oods_values[53]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[122] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[53] * value;

                let value = (column1 - oods_values[54]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[127] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[54] * value;

                let value = (column1 - oods_values[55]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[131] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[55] * value;

                let value = (column1 - oods_values[56]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[132] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[56] * value;

                let value = (column1 - oods_values[57]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[133] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[57] * value;

                let value = (column2 - oods_values[58]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[58] * value;

                let value = (column2 - oods_values[59]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[59] * value;

                let value = (column2 - oods_values[60]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[60] * value;

                let value = (column2 - oods_values[61]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[61] * value;

                let value = (column3 - oods_values[62]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[62] * value;

                let value = (column3 - oods_values[63]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[63] * value;

                let value = (column3 - oods_values[64]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[64] * value;

                let value = (column3 - oods_values[65]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[65] * value;

                let value = (column3 - oods_values[66]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[7] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[66] * value;

                let value = (column3 - oods_values[67]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[11] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[67] * value;

                let value = (column3 - oods_values[68]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[16] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[68] * value;

                let value = (column3 - oods_values[69]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[20] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[69] * value;

                let value = (column3 - oods_values[70]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[22] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[70] * value;

                let value = (column3 - oods_values[71]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[24] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[71] * value;

                let value = (column3 - oods_values[72]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[26] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[72] * value;

                let value = (column3 - oods_values[73]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[28] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[73] * value;

                let value = (column3 - oods_values[74]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[31] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[74] * value;

                let value = (column3 - oods_values[75]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[33] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[75] * value;

                let value = (column3 - oods_values[76]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[37] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[76] * value;

                let value = (column3 - oods_values[77]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[39] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[77] * value;

                let value = (column3 - oods_values[78]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[41] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[78] * value;

                let value = (column3 - oods_values[79]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[43] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[79] * value;

                let value = (column3 - oods_values[80]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[45] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[80] * value;

                let value = (column3 - oods_values[81]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[46] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[81] * value;

                let value = (column3 - oods_values[82]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[48] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[82] * value;

                let value = (column3 - oods_values[83]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[59] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[83] * value;

                let value = (column3 - oods_values[84]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[60] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[84] * value;

                let value = (column3 - oods_values[85]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[68] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[85] * value;

                let value = (column3 - oods_values[86]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[69] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[86] * value;

                let value = (column3 - oods_values[87]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[70] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[87] * value;

                let value = (column3 - oods_values[88]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[71] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[88] * value;

                let value = (column3 - oods_values[89]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[72] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[89] * value;

                let value = (column3 - oods_values[90]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[73] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[90] * value;

                let value = (column3 - oods_values[91]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[82] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[91] * value;

                let value = (column3 - oods_values[92]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[83] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[92] * value;

                let value = (column3 - oods_values[93]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[84] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[93] * value;

                let value = (column3 - oods_values[94]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[85] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[94] * value;

                let value = (column4 - oods_values[95]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[95] * value;

                let value = (column4 - oods_values[96]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[96] * value;

                let value = (column4 - oods_values[97]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[97] * value;

                let value = (column4 - oods_values[98]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[98] * value;

                let value = (column4 - oods_values[99]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[7] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[99] * value;

                let value = (column4 - oods_values[100]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[8] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[100] * value;

                let value = (column4 - oods_values[101]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[9] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[101] * value;

                let value = (column4 - oods_values[102]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[10] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[102] * value;

                let value = (column4 - oods_values[103]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[11] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[103] * value;

                let value = (column4 - oods_values[104]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[13] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[104] * value;

                let value = (column4 - oods_values[105]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[15] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[105] * value;

                let value = (column4 - oods_values[106]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[16] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[106] * value;

                let value = (column4 - oods_values[107]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[17] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[107] * value;

                let value = (column4 - oods_values[108]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[37] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[108] * value;

                let value = (column4 - oods_values[109]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[52] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[109] * value;

                let value = (column4 - oods_values[110]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[58] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[110] * value;

                let value = (column4 - oods_values[111]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[66] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[111] * value;

                let value = (column4 - oods_values[112]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[67] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[112] * value;

                let value = (column4 - oods_values[113]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[78] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[113] * value;

                let value = (column4 - oods_values[114]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[81] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[114] * value;

                let value = (column4 - oods_values[115]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[3] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[115] * value;

                let value = (column4 - oods_values[116]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[12] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[116] * value;

                let value = (column4 - oods_values[117]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[30] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[117] * value;

                let value = (column4 - oods_values[118]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[112] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[118] * value;

                let value = (column4 - oods_values[119]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[2] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[119] * value;

                let value = (column4 - oods_values[120]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[123] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[120] * value;

                let value = (column4 - oods_values[121]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[124] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[121] * value;

                let value = (column4 - oods_values[122]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[125] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[122] * value;

                let value = (column4 - oods_values[123]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[126] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[123] * value;

                let value = (column4 - oods_values[124]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[128] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[124] * value;

                let value = (column4 - oods_values[125]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[129] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[125] * value;

                let value = (column4 - oods_values[126]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[130] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[126] * value;

                let value = (column4 - oods_values[127]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[1] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[127] * value;

                let value = (column5 - oods_values[128]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[128] * value;

                let value = (column5 - oods_values[129]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[129] * value;

                let value = (column5 - oods_values[130]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[130] * value;

                let value = (column5 - oods_values[131]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[7] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[131] * value;

                let value = (column5 - oods_values[132]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[9] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[132] * value;

                let value = (column5 - oods_values[133]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[11] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[133] * value;

                let value = (column5 - oods_values[134]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[13] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[134] * value;

                let value = (column5 - oods_values[135]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[14] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[135] * value;

                let value = (column5 - oods_values[136]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[16] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[136] * value;

                let value = (column5 - oods_values[137]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[18] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[137] * value;

                let value = (column5 - oods_values[138]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[20] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[138] * value;

                let value = (column5 - oods_values[139]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[21] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[139] * value;

                let value = (column5 - oods_values[140]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[23] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[140] * value;

                let value = (column5 - oods_values[141]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[24] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[141] * value;

                let value = (column5 - oods_values[142]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[25] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[142] * value;

                let value = (column5 - oods_values[143]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[27] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[143] * value;

                let value = (column5 - oods_values[144]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[29] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[144] * value;

                let value = (column5 - oods_values[145]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[32] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[145] * value;

                let value = (column5 - oods_values[146]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[34] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[146] * value;

                let value = (column5 - oods_values[147]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[38] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[147] * value;

                let value = (column5 - oods_values[148]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[40] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[148] * value;

                let value = (column5 - oods_values[149]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[42] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[149] * value;

                let value = (column5 - oods_values[150]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[44] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[150] * value;

                let value = (column5 - oods_values[151]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[47] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[151] * value;

                let value = (column5 - oods_values[152]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[49] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[152] * value;

                let value = (column5 - oods_values[153]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[53] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[153] * value;

                let value = (column5 - oods_values[154]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[54] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[154] * value;

                let value = (column5 - oods_values[155]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[55] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[155] * value;

                let value = (column5 - oods_values[156]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[56] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[156] * value;

                let value = (column5 - oods_values[157]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[61] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[157] * value;

                let value = (column5 - oods_values[158]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[64] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[158] * value;

                let value = (column5 - oods_values[159]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[74] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[159] * value;

                let value = (column5 - oods_values[160]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[77] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[160] * value;

                let value = (column5 - oods_values[161]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[89] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[161] * value;

                let value = (column5 - oods_values[162]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[90] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[162] * value;

                let value = (column5 - oods_values[163]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[91] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[163] * value;

                let value = (column5 - oods_values[164]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[94] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[164] * value;

                let value = (column5 - oods_values[165]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[95] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[165] * value;

                let value = (column5 - oods_values[166]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[96] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[166] * value;

                let value = (column5 - oods_values[167]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[97] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[167] * value;

                let value = (column5 - oods_values[168]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[98] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[168] * value;

                let value = (column5 - oods_values[169]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[99] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[169] * value;

                let value = (column5 - oods_values[170]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[100] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[170] * value;

                let value = (column5 - oods_values[171]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[101] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[171] * value;

                let value = (column5 - oods_values[172]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[102] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[172] * value;

                let value = (column5 - oods_values[173]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[104] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[173] * value;

                let value = (column5 - oods_values[174]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[106] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[174] * value;

                let value = (column5 - oods_values[175]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[103] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[175] * value;

                let value = (column5 - oods_values[176]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[105] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[176] * value;

                let value = (column5 - oods_values[177]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[107] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[177] * value;

                let value = (column5 - oods_values[178]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[108] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[178] * value;

                let value = (column5 - oods_values[179]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[117] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[179] * value;

                let value = (column5 - oods_values[180]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[118] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[180] * value;

                let value = (column5 - oods_values[181]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[119] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[181] * value;

                let value = (column5 - oods_values[182]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[120] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[182] * value;

                let value = (column5 - oods_values[183]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[121] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[183] * value;

                let value = (column6 - oods_values[184]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[184] * value;

                let value = (column6 - oods_values[185]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[185] * value;

                let value = (column6 - oods_values[186]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[186] * value;

                let value = (column6 - oods_values[187]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[6] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[187] * value;

                let value = (column7 - oods_values[188]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[0] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[188] * value;

                let value = (column7 - oods_values[189]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[4] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[189] * value;

                let value = (column7 - oods_values[190]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[5] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[190] * value;

                let value = (column7 - oods_values[191]).field_div(&felt_nonzero!(
                    self.point - autogenerated_pows[8] * self.oods_point
                ));
                total_sum = total_sum + constraint_coefficients[191] * value;

                // Sum the OODS boundary constraints on the composition polynomials
                let oods_point_to_deg = self.oods_point.pow_felt(&Felt::from(CONSTRAINT_DEGREE)); // Layout::CONSTRAINT_DEGREE = 2

                let value = (column_values[8] - oods_values[192])
                    .field_div(&felt_nonzero!(self.point - oods_point_to_deg));
                total_sum = total_sum + constraint_coefficients[192] * value;

                let value = (column_values[9] - oods_values[193])
                    .field_div(&felt_nonzero!(self.point - oods_point_to_deg));
                total_sum = total_sum + constraint_coefficients[193] * value;

                stack.push_front(&total_sum.to_bytes_be()).unwrap();
                self.total_sum = total_sum;

                self.phase = EvalOodsPolynomialInnerPhase::Done;
                vec![]
            }

            EvalOodsPolynomialInnerPhase::Done => {
                vec![]
            }
        }
    }

    fn is_finished(&mut self) -> bool {
        self.phase == EvalOodsPolynomialInnerPhase::Done
    }
}
