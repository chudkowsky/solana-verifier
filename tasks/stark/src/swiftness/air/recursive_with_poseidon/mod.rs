pub mod consts;

use crate::swiftness::air::public_memory::PublicInput;
use felt::Felt;

// Re-export items needed by autogenerated files
pub use utils::global_values::GlobalValues;

pub const BITWISE_RATIO: usize = 16;
pub const BITWISE_ROW_RATIO: usize = 256;
pub const BITWISE_TOTAL_N_BITS: usize = 251;
pub const CPU_COMPONENT_HEIGHT: usize = 16;
pub const CPU_COMPONENT_STEP: usize = 1;
pub const DILUTED_N_BITS: usize = 16;
pub const DILUTED_SPACING: usize = 4;
pub const HAS_BITWISE_BUILTIN: usize = 1;
pub const HAS_DILUTED_POOL: usize = 1;
pub const HAS_EC_OP_BUILTIN: usize = 0;
pub const HAS_ECDSA_BUILTIN: usize = 0;
pub const HAS_KECCAK_BUILTIN: usize = 0;
pub const HAS_OUTPUT_BUILTIN: usize = 1;
pub const HAS_PEDERSEN_BUILTIN: usize = 1;
pub const HAS_POSEIDON_BUILTIN: usize = 1;
pub const HAS_RANGE_CHECK_BUILTIN: usize = 1;
pub const HAS_RANGE_CHECK96_BUILTIN: usize = 0;
pub const IS_DYNAMIC_AIR: usize = 0;
pub const LAYOUT_CODE: Felt =
    Felt::from_hex_unchecked("0x7265637572736976655f776974685f706f736569646f6e");
pub const LOG_CPU_COMPONENT_HEIGHT: usize = 4;
pub const N_DYNAMIC_PARAMS: usize = 0;
pub const PEDERSEN_BUILTIN_RATIO: usize = 256;
pub const PEDERSEN_BUILTIN_REPETITIONS: usize = 1;
pub const PEDERSEN_BUILTIN_ROW_RATIO: usize = 4096;
pub const POSEIDON_M: usize = 3;
pub const POSEIDON_RATIO: usize = 64;
pub const POSEIDON_ROUNDS_FULL: usize = 8;
pub const POSEIDON_ROUNDS_PARTIAL: usize = 83;
pub const POSEIDON_ROW_RATIO: usize = 1024;
pub const PUBLIC_MEMORY_STEP: usize = 16;
pub const RANGE_CHECK_BUILTIN_RATIO: usize = 16;
pub const RANGE_CHECK_BUILTIN_ROW_RATIO: usize = 256;
pub const RANGE_CHECK_N_PARTS: usize = 8;

pub mod segments {
    pub const BITWISE: usize = 5;
    pub const EXECUTION: usize = 1;
    pub const N_SEGMENTS: usize = 7;
    pub const OUTPUT: usize = 2;
    pub const PEDERSEN: usize = 3;
    pub const POSEIDON: usize = 6;
    pub const PROGRAM: usize = 0;
    pub const RANGE_CHECK: usize = 4;
}

pub mod builtins {
    use felt::Felt;

    pub const OUTPUT: Felt = Felt::from_hex_unchecked("0x6F7574707574");
    pub const PEDERSEN: Felt = Felt::from_hex_unchecked("0x706564657273656E");
    pub const RANGE_CHECK: Felt = Felt::from_hex_unchecked("0x72616E67655F636865636B");
    pub const BITWISE: Felt = Felt::from_hex_unchecked("0x62697477697365");
    pub const POSEIDON: Felt = Felt::from_hex_unchecked("0x706F736569646F6E");
}

// Pedersen builtin
pub const SHIFT_POINT_X: Felt =
    Felt::from_hex_unchecked("0x49ee3eba8c1600700ee1b87eb599f16716b0b1022947733551fde4050ca6804");
pub const SHIFT_POINT_Y: Felt =
    Felt::from_hex_unchecked("0x3ca0cfe4b3bc6ddf346d49d06ea0ed34e621062c0e056c1d0405d266e10268a");

pub const BUILTINS: [Felt; 5] = [
    builtins::OUTPUT,
    builtins::PEDERSEN,
    builtins::RANGE_CHECK,
    builtins::BITWISE,
    builtins::POSEIDON,
];

pub struct Layout {}

impl StaticLayoutTrait for Layout {
    const NUM_COLUMNS_FIRST: u32 = 6;
    const NUM_COLUMNS_SECOND: u32 = 2;
}

impl GenericLayoutTrait for Layout {
    fn get_num_columns_first(_public_input: &PublicInput) -> Option<u32> {
        Some(Self::NUM_COLUMNS_FIRST)
    }
    fn get_num_columns_second(_public_input: &PublicInput) -> Option<u32> {
        Some(Self::NUM_COLUMNS_SECOND)
    }
}

impl LayoutTrait for Layout {
    const CONSTRAINT_DEGREE: usize = 2;
    const MASK_SIZE: usize = 192;
    const N_CONSTRAINTS: usize = 124;
    // type InteractionElements = InteractionElements;
}

// StarkCurve
pub mod stark_curve {
    use felt::Felt;

    pub const ALPHA: Felt = Felt::from_hex_unchecked("0x1");
    pub const BETA: Felt = Felt::from_hex_unchecked(
        "0x6f21413efbe40de150e596d72f7a8c5609ad26c15c915c1f4cdfcb99cee9e89",
    );
    pub const ORDER: Felt = Felt::from_hex_unchecked(
        "0x800000000000010ffffffffffffffffb781126dcae7b2321e66a241adc64d2f",
    );
    pub const GEN_X: Felt = Felt::from_hex_unchecked(
        "0x1ef15c18599971b7beced415a40f0c7deacfd9b0d1819e03d723d8bc943cfca",
    );
    pub const GEN_Y: Felt = Felt::from_hex_unchecked(
        "0x5668060aa49730b7be4801df46ec62de53ecd11abe43a32873000c36e8dc1f",
    );
}

pub trait LayoutTrait {
    // type InteractionElements;

    const CONSTRAINT_DEGREE: usize;
    const N_CONSTRAINTS: usize;
    const MASK_SIZE: usize;
}

pub trait StaticLayoutTrait {
    const NUM_COLUMNS_FIRST: u32;
    const NUM_COLUMNS_SECOND: u32;
}

pub trait GenericLayoutTrait {
    fn get_num_columns_first(public_input: &PublicInput) -> Option<u32>;
    fn get_num_columns_second(public_input: &PublicInput) -> Option<u32>;
}
