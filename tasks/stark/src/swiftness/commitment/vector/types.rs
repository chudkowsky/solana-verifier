use crate::funvec::{FunVec, FUNVEC_AUTHENTICATIONS};
use crate::swiftness::commitment::vector::config::{Config, ConfigTrait, VectorConfigBytes};
use felt::Felt;
use utils::BidirectionalStack;

// Commitment for a vector of field elements.
#[derive(Debug, Clone, Copy, PartialEq, Default)]
pub struct Commitment {
    pub config: Config,
    pub commitment_hash: Felt,
}

pub struct VectorCommitmentBytes {
    pub config: VectorConfigBytes,
    pub commitment_hash: [u8; 32],
}

impl Commitment {
    pub fn new(config: Config, commitment_hash: Felt) -> Self {
        Self {
            config,
            commitment_hash,
        }
    }

    /// Read Query from stack: index first, then value
    pub fn from_stack<T: BidirectionalStack>(stack: &mut T) -> Self {
        let config = Config::from_stack(stack);
        let commitment_hash = Felt::from_bytes_be_slice(stack.borrow_front());
        stack.pop_front();
        Self::new(config, commitment_hash)
    }

    /// Push Query to stack: value first, then index (reverse order for stack)
    pub fn push_to_stack<T: BidirectionalStack>(&self, stack: &mut T) {
        stack
            .push_front(&self.commitment_hash.to_bytes_be())
            .unwrap();
        self.config.push_to_stack(stack);
    }

    pub fn to_bytes_be(&self) -> VectorCommitmentBytes {
        VectorCommitmentBytes {
            config: self.config.to_bytes_be(),
            commitment_hash: self.commitment_hash.to_bytes_be(),
        }
    }
}

#[derive(Debug, Default, Clone, Copy, PartialEq)]
pub struct Witness {
    // The authentication values: all the siblings of the subtree generated by the queried indices,
    // bottom layer up, left to right.
    pub authentications: FunVec<Felt, FUNVEC_AUTHENTICATIONS>,
}

// Query represents a single query to the vector commitment
#[derive(Debug, Clone)]
pub struct Query {
    pub index: Felt,
    pub value: Felt,
}

impl Query {
    pub fn new(index: Felt, value: Felt) -> Self {
        Self { index, value }
    }
    pub fn from_bytes(index_bytes: &[u8], value_bytes: &[u8]) -> Self {
        Self {
            index: Felt::from_bytes_be_slice(index_bytes),
            value: Felt::from_bytes_be_slice(value_bytes),
        }
    }
    /// Read Query from stack: index first, then value
    pub fn from_stack<T: BidirectionalStack>(stack: &mut T) -> Self {
        let index = Felt::from_bytes_be_slice(stack.borrow_front());
        stack.pop_front();
        let value = Felt::from_bytes_be_slice(stack.borrow_front());
        stack.pop_front();
        Self::new(index, value)
    }

    /// Push Query to stack: value first, then index (reverse order for stack)
    pub fn push_to_stack<T: BidirectionalStack>(&self, stack: &mut T) {
        stack.push_front(&self.value.to_bytes_be()).unwrap();
        stack.push_front(&self.index.to_bytes_be()).unwrap();
    }

    pub fn to_bytes(&self) -> (Vec<u8>, Vec<u8>) {
        (
            self.index.to_bytes_be().to_vec(),
            self.value.to_bytes_be().to_vec(),
        )
    }

    /// Push multiple queries to stack with length
    pub fn push_queries_to_stack<T: BidirectionalStack>(queries: &[Query], stack: &mut T) {
        // Push queries in reverse order for stack
        for query in queries.iter().rev() {
            query.push_to_stack(stack);
        }
        // Push length
        stack
            .push_front(&Felt::from(queries.len()).to_bytes_be())
            .unwrap();
    }
}

// QueryWithDepth extends Query with depth information for tree traversal
#[derive(Debug, Clone)]
pub struct QueryWithDepth {
    pub index: Felt,
    pub value: Felt,
    pub depth: Felt,
}

impl Default for QueryWithDepth {
    fn default() -> Self {
        Self {
            index: Felt::ZERO,
            value: Felt::ZERO,
            depth: Felt::ZERO,
        }
    }
}
impl QueryWithDepth {
    pub fn from_query(query: &Query, depth: Felt) -> Self {
        Self {
            index: query.index,
            value: query.value,
            depth,
        }
    }
    pub fn from_query_with_shift(query: &Query, depth: Felt, shift: Felt) -> Self {
        Self {
            index: query.index + shift,
            value: query.value,
            depth,
        }
    }

    /// Push multiple QueryWithDepth objects to stack with length
    pub fn push_queries_with_depth_to_stack<T: BidirectionalStack>(
        queries: &[QueryWithDepth],
        stack: &mut T,
    ) {
        // Push queries in reverse order for stack
        for query in queries.iter().rev() {
            stack.push_front(&query.depth.to_bytes_be()).unwrap();
            stack.push_front(&query.value.to_bytes_be()).unwrap();
            stack.push_front(&query.index.to_bytes_be()).unwrap();
        }
        // Push length
        stack
            .push_front(&Felt::from(queries.len()).to_bytes_be())
            .unwrap();
    }
}

#[derive(Debug, Clone)]
#[repr(C)]
pub struct PendingHashComputation {
    pub is_active: bool,
    pub parent_index: Felt,
    pub parent_depth: Felt,
    pub next_start: u128,
    pub next_auth_start: u128,
}
